//
// FineTuningAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation

enum HTTPMethod: String {
    case get = "GET"
    case post = "POST"
    case put = "PUT"
    case delete = "DELETE"
    case head = "HEAD"
    case patch = "PATCH"
    case options = "OPTIONS"
    case trace = "TRACE"
    case connect = "CONNECT"

    init(stringValue: String) {
        guard let method = HTTPMethod(rawValue: stringValue.uppercased()) else {
            self = .get
            return
        }
        self = method
    }
}

internal struct Request {
    var url: URL
    var method: HTTPMethod
    var body: Data? = nil
    var queryParams: [URLQueryItem] = []
    var headers: [String: String] = [:]

    func urlRequest() throws -> URLRequest {
        var urlComponents = URLComponents(url: url, resolvingAgainstBaseURL: true)!
        var existingQueryItems = urlComponents.queryItems ?? []
        existingQueryItems.append(contentsOf: queryParams)
        urlComponents.queryItems = existingQueryItems
        var urlRequest = URLRequest(url: urlComponents.url!)
        headers.forEach { (k, v) in
            urlRequest.setValue(v, forHTTPHeaderField: k)
        }
        urlRequest.httpMethod = method.rawValue
        urlRequest.httpBody = body
        return urlRequest
    }
}

protocol FineTuningAPITransport: Sendable {
    func execute(request: Request) async throws -> (Data, URLResponse)
}

protocol FineTuningAPIClientMiddleware: Sendable {
    func intercept(
        _ request: Request,
        next: (Request) async throws -> (Data, URLResponse)
    ) async throws -> (Data, URLResponse)
}


open class FineTuningAPI: FineTuningAPIEndpoints, @unchecked Sendable {
    internal var transport: FineTuningAPITransport
    internal var middlewares: [FineTuningAPIClientMiddleware]
    internal var basePath: String
    internal var jsonDecoder: JSONDecoder

    init(basePath: String, transport: FineTuningAPITransport, middlewares: [FineTuningAPIClientMiddleware], jsonDecoder: JSONDecoder = JSONDecoder.default) {
        self.basePath = basePath
        self.transport = transport
        self.middlewares = middlewares
        self.jsonDecoder = jsonDecoder
    }

    func send<Response: Codable>(
        request: Request,
        deserializer: (Data) throws -> Response
    ) async throws -> Response {

        // TODO: make this a bit nicer and create an API error to make it easier to handle stuff
        func makeError(_ error: Error) -> Error {
            return error
        }

        func wrappingErrors<R>(
            work: () async throws -> R,
            mapError: (Error) -> Error
        ) async throws -> R {
            do {
                return try await work()
            } catch {
                throw mapError(error)
            }
        }

        let (data, _) = try await wrappingErrors {
            var next: (Request) async throws -> (Data, URLResponse) = { _request in
                try await wrappingErrors {
                    try await self.transport.execute(request: _request)
                } mapError: { error in
                    makeError(error)
                }
            }
            for middleware in middlewares.reversed() {
                let tmp = next
                next = {
                    try await middleware.intercept(
                        $0,
                        next: tmp
                    )
                }
            }
            return try await next(request)
        } mapError: { error in
            makeError(error)
        }

        return try await wrappingErrors {
            try deserializer(data)
        } mapError: { error in
            makeError(error)
        }
    }

    func makeRequest(
        uriPath: String,
        queryParams: [URLQueryItem] = [],
        httpMethod: String
    ) throws -> Request {
        let url = URL(string: basePath + uriPath)!
        return Request(
            url: url,
            method: .init(stringValue: httpMethod),
            queryParams: queryParams,
            headers: ["Content-Type": "application/json"]
        )
    }

    func makeRequest<T: Encodable>(
        uriPath: String,
        queryParams: [URLQueryItem] = [],
        httpMethod: String,
        request: T
    ) throws -> Request {
        var r = try makeRequest(uriPath: uriPath, queryParams: queryParams, httpMethod: httpMethod)
        r.body = try JSONEncoder().encode(request)
        return r
    }


    /**
     Immediately cancel a fine-tune job. 
     
     - parameter fineTuningJobId: (path) The ID of the fine-tuning job to cancel.  
     - returns: FineTuningJob
     */

    open func cancelFineTuningJob(fineTuningJobId: String) async throws -> FineTuningJob {
        var localVariablePath = "/fine_tuning/jobs/{fine_tuning_job_id}/cancel"
        let fineTuningJobIdPreEscape = "\(APIHelper.mapValueToPathItem(fineTuningJobId))"
        let fineTuningJobIdPostEscape = fineTuningJobIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{fine_tuning_job_id}", with: fineTuningJobIdPostEscape, options: .literal, range: nil)
        
        let urlRequest = try makeRequest(
            uriPath: localVariablePath,
            httpMethod: "POST"
        )
        return try await send(request: urlRequest) {
            try self.jsonDecoder.decode(FineTuningJob.self, from: $0)
        }
    }
    /**
     Immediately cancel a fine-tune job. 
     - POST /fine_tuning/jobs/{fine_tuning_job_id}/cancel
     - parameter fineTuningJobId: (path) The ID of the fine-tuning job to cancel.  
     - returns: RequestBuilder<FineTuningJob> 
     */


    /**
     Creates a fine-tuning job which begins the process of creating a new model from a given dataset.  Response includes details of the enqueued job including job status and the name of the fine-tuned models once complete.  [Learn more about fine-tuning](/docs/guides/fine-tuning) 
     
     - parameter createFineTuningJobRequest: (body)  
     - returns: FineTuningJob
     */

    open func createFineTuningJob(createFineTuningJobRequest: CreateFineTuningJobRequest) async throws -> FineTuningJob {
        let localVariablePath = "/fine_tuning/jobs"
        
        let urlRequest = try makeRequest(
            uriPath: localVariablePath,
            httpMethod: "POST",
            request: createFineTuningJobRequest
        )
        return try await send(request: urlRequest) {
            try self.jsonDecoder.decode(FineTuningJob.self, from: $0)
        }
    }
    /**
     Creates a fine-tuning job which begins the process of creating a new model from a given dataset.  Response includes details of the enqueued job including job status and the name of the fine-tuned models once complete.  [Learn more about fine-tuning](/docs/guides/fine-tuning) 
     - POST /fine_tuning/jobs
     - parameter createFineTuningJobRequest: (body)  
     - returns: RequestBuilder<FineTuningJob> 
     */


    /**
     Get status updates for a fine-tuning job. 
     
     - parameter fineTuningJobId: (path) The ID of the fine-tuning job to get events for.  
     - parameter after: (query) Identifier for the last event from the previous pagination request. (optional)
     - parameter limit: (query) Number of events to retrieve. (optional, default to 20)
     - returns: ListFineTuningJobEventsResponse
     */

    open func listFineTuningEvents(fineTuningJobId: String, after: String? = nil, limit: Int? = nil) async throws -> ListFineTuningJobEventsResponse {
        var localVariablePath = "/fine_tuning/jobs/{fine_tuning_job_id}/events"
        let fineTuningJobIdPreEscape = "\(APIHelper.mapValueToPathItem(fineTuningJobId))"
        let fineTuningJobIdPostEscape = fineTuningJobIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{fine_tuning_job_id}", with: fineTuningJobIdPostEscape, options: .literal, range: nil)
        let queryParams = APIHelper.mapValuesToQueryItems([
            "after": (wrappedValue: after?.encodeToJSON(), isExplode: true),
            "limit": (wrappedValue: limit?.encodeToJSON(), isExplode: true),
        ])
        let urlRequest = try makeRequest(
            uriPath: localVariablePath,
            queryParams: queryParams ?? [],
            httpMethod: "GET"
        )
        return try await send(request: urlRequest) {
            try self.jsonDecoder.decode(ListFineTuningJobEventsResponse.self, from: $0)
        }
    }
    /**
     Get status updates for a fine-tuning job. 
     - GET /fine_tuning/jobs/{fine_tuning_job_id}/events
     - parameter fineTuningJobId: (path) The ID of the fine-tuning job to get events for.  
     - parameter after: (query) Identifier for the last event from the previous pagination request. (optional)
     - parameter limit: (query) Number of events to retrieve. (optional, default to 20)
     - returns: RequestBuilder<ListFineTuningJobEventsResponse> 
     */


    /**
     List checkpoints for a fine-tuning job. 
     
     - parameter fineTuningJobId: (path) The ID of the fine-tuning job to get checkpoints for.  
     - parameter after: (query) Identifier for the last checkpoint ID from the previous pagination request. (optional)
     - parameter limit: (query) Number of checkpoints to retrieve. (optional, default to 10)
     - returns: ListFineTuningJobCheckpointsResponse
     */

    open func listFineTuningJobCheckpoints(fineTuningJobId: String, after: String? = nil, limit: Int? = nil) async throws -> ListFineTuningJobCheckpointsResponse {
        var localVariablePath = "/fine_tuning/jobs/{fine_tuning_job_id}/checkpoints"
        let fineTuningJobIdPreEscape = "\(APIHelper.mapValueToPathItem(fineTuningJobId))"
        let fineTuningJobIdPostEscape = fineTuningJobIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{fine_tuning_job_id}", with: fineTuningJobIdPostEscape, options: .literal, range: nil)
        let queryParams = APIHelper.mapValuesToQueryItems([
            "after": (wrappedValue: after?.encodeToJSON(), isExplode: true),
            "limit": (wrappedValue: limit?.encodeToJSON(), isExplode: true),
        ])
        let urlRequest = try makeRequest(
            uriPath: localVariablePath,
            queryParams: queryParams ?? [],
            httpMethod: "GET"
        )
        return try await send(request: urlRequest) {
            try self.jsonDecoder.decode(ListFineTuningJobCheckpointsResponse.self, from: $0)
        }
    }
    /**
     List checkpoints for a fine-tuning job. 
     - GET /fine_tuning/jobs/{fine_tuning_job_id}/checkpoints
     - parameter fineTuningJobId: (path) The ID of the fine-tuning job to get checkpoints for.  
     - parameter after: (query) Identifier for the last checkpoint ID from the previous pagination request. (optional)
     - parameter limit: (query) Number of checkpoints to retrieve. (optional, default to 10)
     - returns: RequestBuilder<ListFineTuningJobCheckpointsResponse> 
     */


    /**
     List your organization's fine-tuning jobs 
     
     - parameter after: (query) Identifier for the last job from the previous pagination request. (optional)
     - parameter limit: (query) Number of fine-tuning jobs to retrieve. (optional, default to 20)
     - returns: ListPaginatedFineTuningJobsResponse
     */

    open func listPaginatedFineTuningJobs(after: String? = nil, limit: Int? = nil) async throws -> ListPaginatedFineTuningJobsResponse {
        let localVariablePath = "/fine_tuning/jobs"
        let queryParams = APIHelper.mapValuesToQueryItems([
            "after": (wrappedValue: after?.encodeToJSON(), isExplode: true),
            "limit": (wrappedValue: limit?.encodeToJSON(), isExplode: true),
        ])
        let urlRequest = try makeRequest(
            uriPath: localVariablePath,
            queryParams: queryParams ?? [],
            httpMethod: "GET"
        )
        return try await send(request: urlRequest) {
            try self.jsonDecoder.decode(ListPaginatedFineTuningJobsResponse.self, from: $0)
        }
    }
    /**
     List your organization's fine-tuning jobs 
     - GET /fine_tuning/jobs
     - parameter after: (query) Identifier for the last job from the previous pagination request. (optional)
     - parameter limit: (query) Number of fine-tuning jobs to retrieve. (optional, default to 20)
     - returns: RequestBuilder<ListPaginatedFineTuningJobsResponse> 
     */


    /**
     Get info about a fine-tuning job.  [Learn more about fine-tuning](/docs/guides/fine-tuning) 
     
     - parameter fineTuningJobId: (path) The ID of the fine-tuning job.  
     - returns: FineTuningJob
     */

    open func retrieveFineTuningJob(fineTuningJobId: String) async throws -> FineTuningJob {
        var localVariablePath = "/fine_tuning/jobs/{fine_tuning_job_id}"
        let fineTuningJobIdPreEscape = "\(APIHelper.mapValueToPathItem(fineTuningJobId))"
        let fineTuningJobIdPostEscape = fineTuningJobIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{fine_tuning_job_id}", with: fineTuningJobIdPostEscape, options: .literal, range: nil)
        
        let urlRequest = try makeRequest(
            uriPath: localVariablePath,
            httpMethod: "GET"
        )
        return try await send(request: urlRequest) {
            try self.jsonDecoder.decode(FineTuningJob.self, from: $0)
        }
    }
    /**
     Get info about a fine-tuning job.  [Learn more about fine-tuning](/docs/guides/fine-tuning) 
     - GET /fine_tuning/jobs/{fine_tuning_job_id}
     - parameter fineTuningJobId: (path) The ID of the fine-tuning job.  
     - returns: RequestBuilder<FineTuningJob> 
     */

}

protocol FineTuningAPIEndpoints {


        func cancelFineTuningJob(fineTuningJobId: String) async throws -> FineTuningJob


        func createFineTuningJob(createFineTuningJobRequest: CreateFineTuningJobRequest) async throws -> FineTuningJob


        func listFineTuningEvents(fineTuningJobId: String, after: String?, limit: Int?) async throws -> ListFineTuningJobEventsResponse


        func listFineTuningJobCheckpoints(fineTuningJobId: String, after: String?, limit: Int?) async throws -> ListFineTuningJobCheckpointsResponse


        func listPaginatedFineTuningJobs(after: String?, limit: Int?) async throws -> ListPaginatedFineTuningJobsResponse


        func retrieveFineTuningJob(fineTuningJobId: String) async throws -> FineTuningJob


}

