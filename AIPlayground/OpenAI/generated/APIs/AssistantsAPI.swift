//
// AssistantsAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation

enum HTTPMethod: String {
    case get = "GET"
    case post = "POST"
    case put = "PUT"
    case delete = "DELETE"
    case head = "HEAD"
    case patch = "PATCH"
    case options = "OPTIONS"
    case trace = "TRACE"
    case connect = "CONNECT"

    init(stringValue: String) {
        guard let method = HTTPMethod(rawValue: stringValue.uppercased()) else {
            self = .get
            return
        }
        self = method
    }
}

internal struct Request {
    var url: URL
    var method: HTTPMethod
    var body: Data? = nil
    var stream: Bool
    var queryParams: [URLQueryItem] = []
    var headers: [String: String] = [:]

    func urlRequest() throws -> URLRequest {
        var urlComponents = URLComponents(url: url, resolvingAgainstBaseURL: true)!
        var existingQueryItems = urlComponents.queryItems ?? []
        existingQueryItems.append(contentsOf: queryParams)
        urlComponents.queryItems = existingQueryItems
        var urlRequest = URLRequest(url: urlComponents.url!)
        headers.forEach { (k, v) in
            urlRequest.setValue(v, forHTTPHeaderField: k)
        }
        urlRequest.httpMethod = method.rawValue
        urlRequest.httpBody = body
        return urlRequest
    }
}

protocol AssistantsAPITransport: Sendable {
    func execute(request: Request) async throws -> (Data, URLResponse)
}

protocol StreamingAPITransport: Sendable {
    func execute(request: Request, onReceive: @escaping (StreamingChunk) -> (), onFinish: @escaping () -> ()) throws
}

protocol AssistantsAPIClientMiddleware: Sendable {
    func intercept(
        _ request: Request,
        next: (Request) async throws -> (Data, URLResponse)
    ) async throws -> (Data, URLResponse)
}


open class AssistantsAPI: AssistantsAPIEndpoints, @unchecked Sendable {
    internal var transport: AssistantsAPITransport
    internal var streamingTransport: StreamingAPITransport
    internal var middlewares: [AssistantsAPIClientMiddleware]
    internal var basePath: String
    internal var jsonDecoder: JSONDecoder

    init(
        basePath: String,
        transport: AssistantsAPITransport,
        streamingTransport: StreamingAPITransport,
        middlewares: [AssistantsAPIClientMiddleware],
        jsonDecoder: JSONDecoder = JSONDecoder()
    ) {
        self.basePath = basePath
        self.transport = transport
        self.streamingTransport = streamingTransport
        self.middlewares = middlewares
        self.jsonDecoder = jsonDecoder
    }

    func send<Response: Codable>(
        request: Request,
        deserializer: (Data) throws -> Response
    ) async throws -> Response {

        // TODO: make this a bit nicer and create an API error to make it easier to handle stuff
        func makeError(_ error: Error) -> Error {
            return error
        }

        func wrappingErrors<R>(
            work: () async throws -> R,
            mapError: (Error) -> Error
        ) async throws -> R {
            do {
                return try await work()
            } catch {
                throw mapError(error)
            }
        }

        let (data, _) = try await wrappingErrors {
            var next: (Request) async throws -> (Data, URLResponse) = { _request in
                try await wrappingErrors {
                    try await self.transport.execute(request: _request)
                } mapError: { error in
                    makeError(error)
                }
            }
            for middleware in middlewares.reversed() {
                let tmp = next
                next = {
                    try await middleware.intercept(
                        $0,
                        next: tmp
                    )
                }
            }
            return try await next(request)
        } mapError: { error in
            makeError(error)
        }

        return try await wrappingErrors {
            try deserializer(data)
        } mapError: { error in
            makeError(error)
        }
    }

    func makeRequest(
        uriPath: String,
        queryParams: [URLQueryItem] = [],
        httpMethod: String,
        stream: Bool = false
    ) throws -> Request {
        let url = URL(string: basePath + uriPath)!
        return Request(
            url: url,
            method: .init(stringValue: httpMethod),
            stream: stream,
            queryParams: queryParams,
            headers: ["Content-Type": "application/json"]
        )
    }

    func makeRequest<T: Encodable>(
        uriPath: String,
        queryParams: [URLQueryItem] = [],
        httpMethod: String,
        request: T,
        stream: Bool = false
    ) throws -> Request {
        var r = try makeRequest(uriPath: uriPath, queryParams: queryParams, httpMethod: httpMethod, stream: stream)
        r.body = try JSONEncoder().encode(request)
        return r
    }


    /**
     Cancels a run that is `in_progress`.
     
     - parameter threadId: (path) The ID of the thread to which this run belongs. 
     - parameter runId: (path) The ID of the run to cancel. 
     - returns: RunObject
     */

    open func cancelRun(threadId: String, runId: String) async throws -> RunObject {
        var localVariablePath = "/threads/{thread_id}/runs/{run_id}/cancel"
        let threadIdPreEscape = "\(APIHelper.mapValueToPathItem(threadId))"
        let threadIdPostEscape = threadIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{thread_id}", with: threadIdPostEscape, options: .literal, range: nil)
        let runIdPreEscape = "\(APIHelper.mapValueToPathItem(runId))"
        let runIdPostEscape = runIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{run_id}", with: runIdPostEscape, options: .literal, range: nil)
        
        let urlRequest = try makeRequest(
            uriPath: localVariablePath,
            httpMethod: "POST"
        )
        return try await send(request: urlRequest) {
            try self.jsonDecoder.decode(RunObject.self, from: $0)
        }
    }
    /**
     Cancels a run that is `in_progress`.
     - POST /threads/{thread_id}/runs/{run_id}/cancel
     - parameter threadId: (path) The ID of the thread to which this run belongs. 
     - parameter runId: (path) The ID of the run to cancel. 
     - returns: RequestBuilder<RunObject> 
     */


    /**
     Create an assistant with a model and instructions.
     
     - parameter createAssistantRequest: (body)  
     - returns: AssistantObject
     */

    open func createAssistant(createAssistantRequest: CreateAssistantRequest) async throws -> AssistantObject {
        let localVariablePath = "/assistants"
        
        let urlRequest = try makeRequest(
            uriPath: localVariablePath,
            httpMethod: "POST",
            request: createAssistantRequest
        )
        return try await send(request: urlRequest) {
            try self.jsonDecoder.decode(AssistantObject.self, from: $0)
        }
    }
    /**
     Create an assistant with a model and instructions.
     - POST /assistants
     - parameter createAssistantRequest: (body)  
     - returns: RequestBuilder<AssistantObject> 
     */


    /**
     Create a message.
     
     - parameter threadId: (path) The ID of the [thread](/docs/api-reference/threads) to create a message for. 
     - parameter createMessageRequest: (body)  
     - returns: MessageObject
     */

    open func createMessage(threadId: String, createMessageRequest: CreateMessageRequest) async throws -> MessageObject {
        var localVariablePath = "/threads/{thread_id}/messages"
        let threadIdPreEscape = "\(APIHelper.mapValueToPathItem(threadId))"
        let threadIdPostEscape = threadIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{thread_id}", with: threadIdPostEscape, options: .literal, range: nil)
        
        let urlRequest = try makeRequest(
            uriPath: localVariablePath,
            httpMethod: "POST",
            request: createMessageRequest
        )
        return try await send(request: urlRequest) {
            try self.jsonDecoder.decode(MessageObject.self, from: $0)
        }
    }
    /**
     Create a message.
     - POST /threads/{thread_id}/messages
     - parameter threadId: (path) The ID of the [thread](/docs/api-reference/threads) to create a message for. 
     - parameter createMessageRequest: (body)  
     - returns: RequestBuilder<MessageObject> 
     */

    /**
     Create a run.
     
     - parameter threadId: (path) The ID of the thread to run. 
     - parameter createRunRequest: (body)  
     - parameter include: (query) A list of additional fields to include in the response. Currently the only supported value is &#x60;step_details.tool_calls[*].file_search.results[*].content&#x60; to fetch the file search result content.  See the [file search tool documentation](/docs/assistants/tools/file-search/customizing-file-search-settings) for more information.  (optional)
     - returns: RunObject
     */

    open func createRun(threadId: String, createRunRequest: CreateRunRequest, include: [Include_createRun]? = nil) async throws -> RunObject {
        var localVariablePath = "/threads/{thread_id}/runs"
        let threadIdPreEscape = "\(APIHelper.mapValueToPathItem(threadId))"
        let threadIdPostEscape = threadIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{thread_id}", with: threadIdPostEscape, options: .literal, range: nil)
        let queryParams = APIHelper.mapValuesToQueryItems([
            "include[]": (wrappedValue: include?.encodeToJSON(), isExplode: true),
        ])
        let urlRequest = try makeRequest(
            uriPath: localVariablePath,
            queryParams: queryParams ?? [],
            httpMethod: "POST",
            request: createRunRequest,
            stream: createRunRequest.stream ?? false
        )
        return try await send(request: urlRequest) {
            do {
                return try self.jsonDecoder.decode(RunObject.self, from: $0)
            } catch {
                throw error
            }
        }
    }
    
    open func createRun(
        threadId: String,
        createRunRequest: CreateRunRequest,
        include: [Include_createRun]? = nil,
        onReceive: @escaping (StreamingChunk) -> (),
        onFinish: @escaping () -> ()
    ) throws {
        var localVariablePath = "/threads/{thread_id}/runs"
        let threadIdPreEscape = "\(APIHelper.mapValueToPathItem(threadId))"
        let threadIdPostEscape = threadIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{thread_id}", with: threadIdPostEscape, options: .literal, range: nil)
        let queryParams = APIHelper.mapValuesToQueryItems([
            "include[]": (wrappedValue: include?.encodeToJSON(), isExplode: true),
        ])
        let urlRequest = try makeRequest(
            uriPath: localVariablePath,
            queryParams: queryParams ?? [],
            httpMethod: "POST",
            request: createRunRequest,
            stream: createRunRequest.stream ?? false
        )
        
        try streamingTransport.execute(request: urlRequest, onReceive: onReceive, onFinish: onFinish)
    }
    /**
     Create a run.
     - POST /threads/{thread_id}/runs
     - parameter threadId: (path) The ID of the thread to run. 
     - parameter createRunRequest: (body)  
     - parameter include: (query) A list of additional fields to include in the response. Currently the only supported value is &#x60;step_details.tool_calls[*].file_search.results[*].content&#x60; to fetch the file search result content.  See the [file search tool documentation](/docs/assistants/tools/file-search/customizing-file-search-settings) for more information.  (optional)
     - returns: RequestBuilder<RunObject> 
     */


    /**
     Create a thread.
     
     - parameter createThreadRequest: (body)  (optional)
     - returns: ThreadObject
     */

    open func createThread(createThreadRequest: CreateThreadRequest? = nil) async throws -> ThreadObject {
        let localVariablePath = "/threads"
        
        let urlRequest = try makeRequest(
            uriPath: localVariablePath,
            httpMethod: "POST",
            request: createThreadRequest
        )
        return try await send(request: urlRequest) {
            try self.jsonDecoder.decode(ThreadObject.self, from: $0)
        }
    }
    /**
     Create a thread.
     - POST /threads
     - parameter createThreadRequest: (body)  (optional)
     - returns: RequestBuilder<ThreadObject> 
     */


    /**
     Create a thread and run it in one request.
     
     - parameter createThreadAndRunRequest: (body)  
     - returns: RunObject
     */

    open func createThreadAndRun(createThreadAndRunRequest: CreateThreadAndRunRequest) async throws -> RunObject {
        let localVariablePath = "/threads/runs"
        
        let urlRequest = try makeRequest(
            uriPath: localVariablePath,
            httpMethod: "POST",
            request: createThreadAndRunRequest
        )
        return try await send(request: urlRequest) {
            try self.jsonDecoder.decode(RunObject.self, from: $0)
        }
    }
    /**
     Create a thread and run it in one request.
     - POST /threads/runs
     - parameter createThreadAndRunRequest: (body)  
     - returns: RequestBuilder<RunObject> 
     */


    /**
     Delete an assistant.
     
     - parameter assistantId: (path) The ID of the assistant to delete. 
     - returns: DeleteAssistantResponse
     */

    open func deleteAssistant(assistantId: String) async throws -> DeleteAssistantResponse {
        var localVariablePath = "/assistants/{assistant_id}"
        let assistantIdPreEscape = "\(APIHelper.mapValueToPathItem(assistantId))"
        let assistantIdPostEscape = assistantIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{assistant_id}", with: assistantIdPostEscape, options: .literal, range: nil)
        
        let urlRequest = try makeRequest(
            uriPath: localVariablePath,
            httpMethod: "DELETE"
        )
        return try await send(request: urlRequest) {
            try self.jsonDecoder.decode(DeleteAssistantResponse.self, from: $0)
        }
    }
    /**
     Delete an assistant.
     - DELETE /assistants/{assistant_id}
     - parameter assistantId: (path) The ID of the assistant to delete. 
     - returns: RequestBuilder<DeleteAssistantResponse> 
     */


    /**
     Deletes a message.
     
     - parameter threadId: (path) The ID of the thread to which this message belongs. 
     - parameter messageId: (path) The ID of the message to delete. 
     - returns: DeleteMessageResponse
     */

    open func deleteMessage(threadId: String, messageId: String) async throws -> DeleteMessageResponse {
        var localVariablePath = "/threads/{thread_id}/messages/{message_id}"
        let threadIdPreEscape = "\(APIHelper.mapValueToPathItem(threadId))"
        let threadIdPostEscape = threadIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{thread_id}", with: threadIdPostEscape, options: .literal, range: nil)
        let messageIdPreEscape = "\(APIHelper.mapValueToPathItem(messageId))"
        let messageIdPostEscape = messageIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{message_id}", with: messageIdPostEscape, options: .literal, range: nil)
        
        let urlRequest = try makeRequest(
            uriPath: localVariablePath,
            httpMethod: "DELETE"
        )
        return try await send(request: urlRequest) {
            try self.jsonDecoder.decode(DeleteMessageResponse.self, from: $0)
        }
    }
    /**
     Deletes a message.
     - DELETE /threads/{thread_id}/messages/{message_id}
     - parameter threadId: (path) The ID of the thread to which this message belongs. 
     - parameter messageId: (path) The ID of the message to delete. 
     - returns: RequestBuilder<DeleteMessageResponse> 
     */


    /**
     Delete a thread.
     
     - parameter threadId: (path) The ID of the thread to delete. 
     - returns: DeleteThreadResponse
     */

    open func deleteThread(threadId: String) async throws -> DeleteThreadResponse {
        var localVariablePath = "/threads/{thread_id}"
        let threadIdPreEscape = "\(APIHelper.mapValueToPathItem(threadId))"
        let threadIdPostEscape = threadIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{thread_id}", with: threadIdPostEscape, options: .literal, range: nil)
        
        let urlRequest = try makeRequest(
            uriPath: localVariablePath,
            httpMethod: "DELETE"
        )
        return try await send(request: urlRequest) {
            try self.jsonDecoder.decode(DeleteThreadResponse.self, from: $0)
        }
    }
    /**
     Delete a thread.
     - DELETE /threads/{thread_id}
     - parameter threadId: (path) The ID of the thread to delete. 
     - returns: RequestBuilder<DeleteThreadResponse> 
     */


    /**
     Retrieves an assistant.
     
     - parameter assistantId: (path) The ID of the assistant to retrieve. 
     - returns: AssistantObject
     */

    open func getAssistant(assistantId: String) async throws -> AssistantObject {
        var localVariablePath = "/assistants/{assistant_id}"
        let assistantIdPreEscape = "\(APIHelper.mapValueToPathItem(assistantId))"
        let assistantIdPostEscape = assistantIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{assistant_id}", with: assistantIdPostEscape, options: .literal, range: nil)
        
        let urlRequest = try makeRequest(
            uriPath: localVariablePath,
            httpMethod: "GET"
        )
        return try await send(request: urlRequest) {
            try self.jsonDecoder.decode(AssistantObject.self, from: $0)
        }
    }
    /**
     Retrieves an assistant.
     - GET /assistants/{assistant_id}
     - parameter assistantId: (path) The ID of the assistant to retrieve. 
     - returns: RequestBuilder<AssistantObject> 
     */


    /**
     Retrieve a message.
     
     - parameter threadId: (path) The ID of the [thread](/docs/api-reference/threads) to which this message belongs. 
     - parameter messageId: (path) The ID of the message to retrieve. 
     - returns: MessageObject
     */

    open func getMessage(threadId: String, messageId: String) async throws -> MessageObject {
        var localVariablePath = "/threads/{thread_id}/messages/{message_id}"
        let threadIdPreEscape = "\(APIHelper.mapValueToPathItem(threadId))"
        let threadIdPostEscape = threadIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{thread_id}", with: threadIdPostEscape, options: .literal, range: nil)
        let messageIdPreEscape = "\(APIHelper.mapValueToPathItem(messageId))"
        let messageIdPostEscape = messageIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{message_id}", with: messageIdPostEscape, options: .literal, range: nil)
        
        let urlRequest = try makeRequest(
            uriPath: localVariablePath,
            httpMethod: "GET"
        )
        return try await send(request: urlRequest) {
            try self.jsonDecoder.decode(MessageObject.self, from: $0)
        }
    }
    /**
     Retrieve a message.
     - GET /threads/{thread_id}/messages/{message_id}
     - parameter threadId: (path) The ID of the [thread](/docs/api-reference/threads) to which this message belongs. 
     - parameter messageId: (path) The ID of the message to retrieve. 
     - returns: RequestBuilder<MessageObject> 
     */


    /**
     Retrieves a run.
     
     - parameter threadId: (path) The ID of the [thread](/docs/api-reference/threads) that was run. 
     - parameter runId: (path) The ID of the run to retrieve. 
     - returns: RunObject
     */

    open func getRun(threadId: String, runId: String) async throws -> RunObject {
        var localVariablePath = "/threads/{thread_id}/runs/{run_id}"
        let threadIdPreEscape = "\(APIHelper.mapValueToPathItem(threadId))"
        let threadIdPostEscape = threadIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{thread_id}", with: threadIdPostEscape, options: .literal, range: nil)
        let runIdPreEscape = "\(APIHelper.mapValueToPathItem(runId))"
        let runIdPostEscape = runIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{run_id}", with: runIdPostEscape, options: .literal, range: nil)
        
        let urlRequest = try makeRequest(
            uriPath: localVariablePath,
            httpMethod: "GET"
        )
        return try await send(request: urlRequest) {
            try self.jsonDecoder.decode(RunObject.self, from: $0)
        }
    }
    
    open func getRun(
        threadId: String,
        runId: String,
        onReceive: @escaping (StreamingChunk) -> (),
        onFinish: @escaping () -> ()
    ) throws {
        var localVariablePath = "/threads/{thread_id}/runs/{run_id}"
        let threadIdPreEscape = "\(APIHelper.mapValueToPathItem(threadId))"
        let threadIdPostEscape = threadIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{thread_id}", with: threadIdPostEscape, options: .literal, range: nil)
        let runIdPreEscape = "\(APIHelper.mapValueToPathItem(runId))"
        let runIdPostEscape = runIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{run_id}", with: runIdPostEscape, options: .literal, range: nil)
        
        let urlRequest = try makeRequest(
            uriPath: localVariablePath,
            httpMethod: "GET"
        )
        
        try streamingTransport.execute(request: urlRequest, onReceive: onReceive, onFinish: onFinish)
    }
    

    /**
     Retrieves a run step.
     
     - parameter threadId: (path) The ID of the thread to which the run and run step belongs. 
     - parameter runId: (path) The ID of the run to which the run step belongs. 
     - parameter stepId: (path) The ID of the run step to retrieve. 
     - parameter include: (query) A list of additional fields to include in the response. Currently the only supported value is &#x60;step_details.tool_calls[*].file_search.results[*].content&#x60; to fetch the file search result content.  See the [file search tool documentation](/docs/assistants/tools/file-search/customizing-file-search-settings) for more information.  (optional)
     - returns: RunStepObject
     */

    open func getRunStep(threadId: String, runId: String, stepId: String, include: [Include_getRunStep]? = nil) async throws -> RunStepObject {
        var localVariablePath = "/threads/{thread_id}/runs/{run_id}/steps/{step_id}"
        let threadIdPreEscape = "\(APIHelper.mapValueToPathItem(threadId))"
        let threadIdPostEscape = threadIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{thread_id}", with: threadIdPostEscape, options: .literal, range: nil)
        let runIdPreEscape = "\(APIHelper.mapValueToPathItem(runId))"
        let runIdPostEscape = runIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{run_id}", with: runIdPostEscape, options: .literal, range: nil)
        let stepIdPreEscape = "\(APIHelper.mapValueToPathItem(stepId))"
        let stepIdPostEscape = stepIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{step_id}", with: stepIdPostEscape, options: .literal, range: nil)
        let queryParams = APIHelper.mapValuesToQueryItems([
            "include[]": (wrappedValue: include?.encodeToJSON(), isExplode: true),
        ])
        let urlRequest = try makeRequest(
            uriPath: localVariablePath,
            queryParams: queryParams ?? [],
            httpMethod: "GET"
        )
        return try await send(request: urlRequest) {
            try self.jsonDecoder.decode(RunStepObject.self, from: $0)
        }
    }
    /**
     Retrieves a run step.
     - GET /threads/{thread_id}/runs/{run_id}/steps/{step_id}
     - parameter threadId: (path) The ID of the thread to which the run and run step belongs. 
     - parameter runId: (path) The ID of the run to which the run step belongs. 
     - parameter stepId: (path) The ID of the run step to retrieve. 
     - parameter include: (query) A list of additional fields to include in the response. Currently the only supported value is &#x60;step_details.tool_calls[*].file_search.results[*].content&#x60; to fetch the file search result content.  See the [file search tool documentation](/docs/assistants/tools/file-search/customizing-file-search-settings) for more information.  (optional)
     - returns: RequestBuilder<RunStepObject> 
     */


    /**
     Retrieves a thread.
     
     - parameter threadId: (path) The ID of the thread to retrieve. 
     - returns: ThreadObject
     */

    open func getThread(threadId: String) async throws -> ThreadObject {
        var localVariablePath = "/threads/{thread_id}"
        let threadIdPreEscape = "\(APIHelper.mapValueToPathItem(threadId))"
        let threadIdPostEscape = threadIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{thread_id}", with: threadIdPostEscape, options: .literal, range: nil)
        
        let urlRequest = try makeRequest(
            uriPath: localVariablePath,
            httpMethod: "GET"
        )
        return try await send(request: urlRequest) {
            try self.jsonDecoder.decode(ThreadObject.self, from: $0)
        }
    }
    /**
     Retrieves a thread.
     - GET /threads/{thread_id}
     - parameter threadId: (path) The ID of the thread to retrieve. 
     - returns: RequestBuilder<ThreadObject> 
     */

    /**
     Returns a list of assistants.
     
     - parameter limit: (query) A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20.  (optional, default to 20)
     - parameter order: (query) Sort order by the &#x60;created_at&#x60; timestamp of the objects. &#x60;asc&#x60; for ascending order and &#x60;desc&#x60; for descending order.  (optional, default to .desc)
     - parameter after: (query) A cursor for use in pagination. &#x60;after&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after&#x3D;obj_foo in order to fetch the next page of the list.  (optional)
     - parameter before: (query) A cursor for use in pagination. &#x60;before&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include before&#x3D;obj_foo in order to fetch the previous page of the list.  (optional)
     - returns: ListAssistantsResponse
     */

    open func listAssistants(limit: Int? = nil, order: Order_listAssistants? = nil, after: String? = nil, before: String? = nil) async throws -> ListAssistantsResponse {
        let localVariablePath = "/assistants"
        let queryParams = APIHelper.mapValuesToQueryItems([
            "limit": (wrappedValue: limit?.encodeToJSON(), isExplode: true),
            "order": (wrappedValue: order?.encodeToJSON(), isExplode: true),
            "after": (wrappedValue: after?.encodeToJSON(), isExplode: true),
            "before": (wrappedValue: before?.encodeToJSON(), isExplode: true),
        ])
        let urlRequest = try makeRequest(
            uriPath: localVariablePath,
            queryParams: queryParams ?? [],
            httpMethod: "GET"
        )
        return try await send(request: urlRequest) {
            try self.jsonDecoder.decode(ListAssistantsResponse.self, from: $0)
        }
    }
    /**
     Returns a list of assistants.
     - GET /assistants
     - parameter limit: (query) A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20.  (optional, default to 20)
     - parameter order: (query) Sort order by the &#x60;created_at&#x60; timestamp of the objects. &#x60;asc&#x60; for ascending order and &#x60;desc&#x60; for descending order.  (optional, default to .desc)
     - parameter after: (query) A cursor for use in pagination. &#x60;after&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after&#x3D;obj_foo in order to fetch the next page of the list.  (optional)
     - parameter before: (query) A cursor for use in pagination. &#x60;before&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include before&#x3D;obj_foo in order to fetch the previous page of the list.  (optional)
     - returns: RequestBuilder<ListAssistantsResponse> 
     */


    /**
     Returns a list of messages for a given thread.
     
     - parameter threadId: (path) The ID of the [thread](/docs/api-reference/threads) the messages belong to. 
     - parameter limit: (query) A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20.  (optional, default to 20)
     - parameter order: (query) Sort order by the &#x60;created_at&#x60; timestamp of the objects. &#x60;asc&#x60; for ascending order and &#x60;desc&#x60; for descending order.  (optional, default to .desc)
     - parameter after: (query) A cursor for use in pagination. &#x60;after&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after&#x3D;obj_foo in order to fetch the next page of the list.  (optional)
     - parameter before: (query) A cursor for use in pagination. &#x60;before&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include before&#x3D;obj_foo in order to fetch the previous page of the list.  (optional)
     - parameter runId: (query) Filter messages by the run ID that generated them.  (optional)
     - returns: ListMessagesResponse
     */

    open func listMessages(threadId: String, limit: Int? = nil, order: Order_listMessages? = nil, after: String? = nil, before: String? = nil, runId: String? = nil) async throws -> ListMessagesResponse {
        var localVariablePath = "/threads/{thread_id}/messages"
        let threadIdPreEscape = "\(APIHelper.mapValueToPathItem(threadId))"
        let threadIdPostEscape = threadIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{thread_id}", with: threadIdPostEscape, options: .literal, range: nil)
        let queryParams = APIHelper.mapValuesToQueryItems([
            "limit": (wrappedValue: limit?.encodeToJSON(), isExplode: true),
            "order": (wrappedValue: order?.encodeToJSON(), isExplode: true),
            "after": (wrappedValue: after?.encodeToJSON(), isExplode: true),
            "before": (wrappedValue: before?.encodeToJSON(), isExplode: true),
            "run_id": (wrappedValue: runId?.encodeToJSON(), isExplode: true),
        ])
        let urlRequest = try makeRequest(
            uriPath: localVariablePath,
            queryParams: queryParams ?? [],
            httpMethod: "GET"
        )
        return try await send(request: urlRequest) {
            try self.jsonDecoder.decode(ListMessagesResponse.self, from: $0)
        }
    }
    /**
     Returns a list of messages for a given thread.
     - GET /threads/{thread_id}/messages
     - parameter threadId: (path) The ID of the [thread](/docs/api-reference/threads) the messages belong to. 
     - parameter limit: (query) A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20.  (optional, default to 20)
     - parameter order: (query) Sort order by the &#x60;created_at&#x60; timestamp of the objects. &#x60;asc&#x60; for ascending order and &#x60;desc&#x60; for descending order.  (optional, default to .desc)
     - parameter after: (query) A cursor for use in pagination. &#x60;after&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after&#x3D;obj_foo in order to fetch the next page of the list.  (optional)
     - parameter before: (query) A cursor for use in pagination. &#x60;before&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include before&#x3D;obj_foo in order to fetch the previous page of the list.  (optional)
     - parameter runId: (query) Filter messages by the run ID that generated them.  (optional)
     - returns: RequestBuilder<ListMessagesResponse> 
     */

    /**
     Returns a list of run steps belonging to a run.
     
     - parameter threadId: (path) The ID of the thread the run and run steps belong to. 
     - parameter runId: (path) The ID of the run the run steps belong to. 
     - parameter limit: (query) A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20.  (optional, default to 20)
     - parameter order: (query) Sort order by the &#x60;created_at&#x60; timestamp of the objects. &#x60;asc&#x60; for ascending order and &#x60;desc&#x60; for descending order.  (optional, default to .desc)
     - parameter after: (query) A cursor for use in pagination. &#x60;after&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after&#x3D;obj_foo in order to fetch the next page of the list.  (optional)
     - parameter before: (query) A cursor for use in pagination. &#x60;before&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include before&#x3D;obj_foo in order to fetch the previous page of the list.  (optional)
     - parameter include: (query) A list of additional fields to include in the response. Currently the only supported value is &#x60;step_details.tool_calls[*].file_search.results[*].content&#x60; to fetch the file search result content.  See the [file search tool documentation](/docs/assistants/tools/file-search/customizing-file-search-settings) for more information.  (optional)
     - returns: ListRunStepsResponse
     */

    open func listRunSteps(threadId: String, runId: String, limit: Int? = nil, order: Order_listRunSteps? = nil, after: String? = nil, before: String? = nil, include: [Include_listRunSteps]? = nil) async throws -> ListRunStepsResponse {
        var localVariablePath = "/threads/{thread_id}/runs/{run_id}/steps"
        let threadIdPreEscape = "\(APIHelper.mapValueToPathItem(threadId))"
        let threadIdPostEscape = threadIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{thread_id}", with: threadIdPostEscape, options: .literal, range: nil)
        let runIdPreEscape = "\(APIHelper.mapValueToPathItem(runId))"
        let runIdPostEscape = runIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{run_id}", with: runIdPostEscape, options: .literal, range: nil)
        let queryParams = APIHelper.mapValuesToQueryItems([
            "limit": (wrappedValue: limit?.encodeToJSON(), isExplode: true),
            "order": (wrappedValue: order?.encodeToJSON(), isExplode: true),
            "after": (wrappedValue: after?.encodeToJSON(), isExplode: true),
            "before": (wrappedValue: before?.encodeToJSON(), isExplode: true),
            "include[]": (wrappedValue: include?.encodeToJSON(), isExplode: true),
        ])
        let urlRequest = try makeRequest(
            uriPath: localVariablePath,
            queryParams: queryParams ?? [],
            httpMethod: "GET"
        )
        return try await send(request: urlRequest) {
            try self.jsonDecoder.decode(ListRunStepsResponse.self, from: $0)
        }
    }
    /**
     Returns a list of run steps belonging to a run.
     - GET /threads/{thread_id}/runs/{run_id}/steps
     - parameter threadId: (path) The ID of the thread the run and run steps belong to. 
     - parameter runId: (path) The ID of the run the run steps belong to. 
     - parameter limit: (query) A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20.  (optional, default to 20)
     - parameter order: (query) Sort order by the &#x60;created_at&#x60; timestamp of the objects. &#x60;asc&#x60; for ascending order and &#x60;desc&#x60; for descending order.  (optional, default to .desc)
     - parameter after: (query) A cursor for use in pagination. &#x60;after&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after&#x3D;obj_foo in order to fetch the next page of the list.  (optional)
     - parameter before: (query) A cursor for use in pagination. &#x60;before&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include before&#x3D;obj_foo in order to fetch the previous page of the list.  (optional)
     - parameter include: (query) A list of additional fields to include in the response. Currently the only supported value is &#x60;step_details.tool_calls[*].file_search.results[*].content&#x60; to fetch the file search result content.  See the [file search tool documentation](/docs/assistants/tools/file-search/customizing-file-search-settings) for more information.  (optional)
     - returns: RequestBuilder<ListRunStepsResponse> 
     */

    /**
     Returns a list of runs belonging to a thread.
     
     - parameter threadId: (path) The ID of the thread the run belongs to. 
     - parameter limit: (query) A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20.  (optional, default to 20)
     - parameter order: (query) Sort order by the &#x60;created_at&#x60; timestamp of the objects. &#x60;asc&#x60; for ascending order and &#x60;desc&#x60; for descending order.  (optional, default to .desc)
     - parameter after: (query) A cursor for use in pagination. &#x60;after&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after&#x3D;obj_foo in order to fetch the next page of the list.  (optional)
     - parameter before: (query) A cursor for use in pagination. &#x60;before&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include before&#x3D;obj_foo in order to fetch the previous page of the list.  (optional)
     - returns: ListRunsResponse
     */

    open func listRuns(threadId: String, limit: Int? = nil, order: Order_listRuns? = nil, after: String? = nil, before: String? = nil) async throws -> ListRunsResponse {
        var localVariablePath = "/threads/{thread_id}/runs"
        let threadIdPreEscape = "\(APIHelper.mapValueToPathItem(threadId))"
        let threadIdPostEscape = threadIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{thread_id}", with: threadIdPostEscape, options: .literal, range: nil)
        let queryParams = APIHelper.mapValuesToQueryItems([
            "limit": (wrappedValue: limit?.encodeToJSON(), isExplode: true),
            "order": (wrappedValue: order?.encodeToJSON(), isExplode: true),
            "after": (wrappedValue: after?.encodeToJSON(), isExplode: true),
            "before": (wrappedValue: before?.encodeToJSON(), isExplode: true),
        ])
        let urlRequest = try makeRequest(
            uriPath: localVariablePath,
            queryParams: queryParams ?? [],
            httpMethod: "GET"
        )
        return try await send(request: urlRequest) {
            try self.jsonDecoder.decode(ListRunsResponse.self, from: $0)
        }
    }
    /**
     Returns a list of runs belonging to a thread.
     - GET /threads/{thread_id}/runs
     - parameter threadId: (path) The ID of the thread the run belongs to. 
     - parameter limit: (query) A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20.  (optional, default to 20)
     - parameter order: (query) Sort order by the &#x60;created_at&#x60; timestamp of the objects. &#x60;asc&#x60; for ascending order and &#x60;desc&#x60; for descending order.  (optional, default to .desc)
     - parameter after: (query) A cursor for use in pagination. &#x60;after&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after&#x3D;obj_foo in order to fetch the next page of the list.  (optional)
     - parameter before: (query) A cursor for use in pagination. &#x60;before&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include before&#x3D;obj_foo in order to fetch the previous page of the list.  (optional)
     - returns: RequestBuilder<ListRunsResponse> 
     */


    /**
     Modifies an assistant.
     
     - parameter assistantId: (path) The ID of the assistant to modify. 
     - parameter modifyAssistantRequest: (body)  
     - returns: AssistantObject
     */

    open func modifyAssistant(assistantId: String, modifyAssistantRequest: ModifyAssistantRequest) async throws -> AssistantObject {
        var localVariablePath = "/assistants/{assistant_id}"
        let assistantIdPreEscape = "\(APIHelper.mapValueToPathItem(assistantId))"
        let assistantIdPostEscape = assistantIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{assistant_id}", with: assistantIdPostEscape, options: .literal, range: nil)
        
        let urlRequest = try makeRequest(
            uriPath: localVariablePath,
            httpMethod: "POST",
            request: modifyAssistantRequest
        )
        return try await send(request: urlRequest) {
            try self.jsonDecoder.decode(AssistantObject.self, from: $0)
        }
    }
    /**
     Modifies an assistant.
     - POST /assistants/{assistant_id}
     - parameter assistantId: (path) The ID of the assistant to modify. 
     - parameter modifyAssistantRequest: (body)  
     - returns: RequestBuilder<AssistantObject> 
     */


    /**
     Modifies a message.
     
     - parameter threadId: (path) The ID of the thread to which this message belongs. 
     - parameter messageId: (path) The ID of the message to modify. 
     - parameter modifyMessageRequest: (body)  
     - returns: MessageObject
     */

    open func modifyMessage(threadId: String, messageId: String, modifyMessageRequest: ModifyMessageRequest) async throws -> MessageObject {
        var localVariablePath = "/threads/{thread_id}/messages/{message_id}"
        let threadIdPreEscape = "\(APIHelper.mapValueToPathItem(threadId))"
        let threadIdPostEscape = threadIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{thread_id}", with: threadIdPostEscape, options: .literal, range: nil)
        let messageIdPreEscape = "\(APIHelper.mapValueToPathItem(messageId))"
        let messageIdPostEscape = messageIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{message_id}", with: messageIdPostEscape, options: .literal, range: nil)
        
        let urlRequest = try makeRequest(
            uriPath: localVariablePath,
            httpMethod: "POST",
            request: modifyMessageRequest
        )
        return try await send(request: urlRequest) {
            try self.jsonDecoder.decode(MessageObject.self, from: $0)
        }
    }
    /**
     Modifies a message.
     - POST /threads/{thread_id}/messages/{message_id}
     - parameter threadId: (path) The ID of the thread to which this message belongs. 
     - parameter messageId: (path) The ID of the message to modify. 
     - parameter modifyMessageRequest: (body)  
     - returns: RequestBuilder<MessageObject> 
     */


    /**
     Modifies a run.
     
     - parameter threadId: (path) The ID of the [thread](/docs/api-reference/threads) that was run. 
     - parameter runId: (path) The ID of the run to modify. 
     - parameter modifyRunRequest: (body)  
     - returns: RunObject
     */

    open func modifyRun(threadId: String, runId: String, modifyRunRequest: ModifyRunRequest) async throws -> RunObject {
        var localVariablePath = "/threads/{thread_id}/runs/{run_id}"
        let threadIdPreEscape = "\(APIHelper.mapValueToPathItem(threadId))"
        let threadIdPostEscape = threadIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{thread_id}", with: threadIdPostEscape, options: .literal, range: nil)
        let runIdPreEscape = "\(APIHelper.mapValueToPathItem(runId))"
        let runIdPostEscape = runIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{run_id}", with: runIdPostEscape, options: .literal, range: nil)
        
        let urlRequest = try makeRequest(
            uriPath: localVariablePath,
            httpMethod: "POST",
            request: modifyRunRequest
        )
        return try await send(request: urlRequest) {
            try self.jsonDecoder.decode(RunObject.self, from: $0)
        }
    }
    /**
     Modifies a run.
     - POST /threads/{thread_id}/runs/{run_id}
     - parameter threadId: (path) The ID of the [thread](/docs/api-reference/threads) that was run. 
     - parameter runId: (path) The ID of the run to modify. 
     - parameter modifyRunRequest: (body)  
     - returns: RequestBuilder<RunObject> 
     */


    /**
     Modifies a thread.
     
     - parameter threadId: (path) The ID of the thread to modify. Only the &#x60;metadata&#x60; can be modified. 
     - parameter modifyThreadRequest: (body)  
     - returns: ThreadObject
     */

    open func modifyThread(threadId: String, modifyThreadRequest: ModifyThreadRequest) async throws -> ThreadObject {
        var localVariablePath = "/threads/{thread_id}"
        let threadIdPreEscape = "\(APIHelper.mapValueToPathItem(threadId))"
        let threadIdPostEscape = threadIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{thread_id}", with: threadIdPostEscape, options: .literal, range: nil)
        
        let urlRequest = try makeRequest(
            uriPath: localVariablePath,
            httpMethod: "POST",
            request: modifyThreadRequest
        )
        return try await send(request: urlRequest) {
            try self.jsonDecoder.decode(ThreadObject.self, from: $0)
        }
    }
    /**
     Modifies a thread.
     - POST /threads/{thread_id}
     - parameter threadId: (path) The ID of the thread to modify. Only the &#x60;metadata&#x60; can be modified. 
     - parameter modifyThreadRequest: (body)  
     - returns: RequestBuilder<ThreadObject> 
     */


    /**
     When a run has the `status: \"requires_action\"` and `required_action.type` is `submit_tool_outputs`, this endpoint can be used to submit the outputs from the tool calls once they're all completed. All outputs must be submitted in a single request. 
     
     - parameter threadId: (path) The ID of the [thread](/docs/api-reference/threads) to which this run belongs. 
     - parameter runId: (path) The ID of the run that requires the tool output submission. 
     - parameter submitToolOutputsRunRequest: (body)  
     - returns: RunObject
     */

    open func submitToolOuputsToRun(threadId: String, runId: String, submitToolOutputsRunRequest: SubmitToolOutputsRunRequest) async throws -> RunObject {
        var localVariablePath = "/threads/{thread_id}/runs/{run_id}/submit_tool_outputs"
        let threadIdPreEscape = "\(APIHelper.mapValueToPathItem(threadId))"
        let threadIdPostEscape = threadIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{thread_id}", with: threadIdPostEscape, options: .literal, range: nil)
        let runIdPreEscape = "\(APIHelper.mapValueToPathItem(runId))"
        let runIdPostEscape = runIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{run_id}", with: runIdPostEscape, options: .literal, range: nil)
        
        let urlRequest = try makeRequest(
            uriPath: localVariablePath,
            httpMethod: "POST",
            request: submitToolOutputsRunRequest
        )
        return try await send(request: urlRequest) {
            try self.jsonDecoder.decode(RunObject.self, from: $0)
        }
    }
    /**
     When a run has the `status: \"requires_action\"` and `required_action.type` is `submit_tool_outputs`, this endpoint can be used to submit the outputs from the tool calls once they're all completed. All outputs must be submitted in a single request. 
     - POST /threads/{thread_id}/runs/{run_id}/submit_tool_outputs
     - parameter threadId: (path) The ID of the [thread](/docs/api-reference/threads) to which this run belongs. 
     - parameter runId: (path) The ID of the run that requires the tool output submission. 
     - parameter submitToolOutputsRunRequest: (body)  
     - returns: RequestBuilder<RunObject> 
     */

}

protocol AssistantsAPIEndpoints {


        func cancelRun(threadId: String, runId: String) async throws -> RunObject


        func createAssistant(createAssistantRequest: CreateAssistantRequest) async throws -> AssistantObject


        func createMessage(threadId: String, createMessageRequest: CreateMessageRequest) async throws -> MessageObject


        func createRun(threadId: String, createRunRequest: CreateRunRequest, include: [Include_createRun]?) async throws -> RunObject
    
        func createRun(
            threadId: String,
            createRunRequest: CreateRunRequest,
            include: [Include_createRun]?,
            onReceive: @escaping (StreamingChunk) -> (),
            onFinish: @escaping () -> ()
        ) throws

        func createThread(createThreadRequest: CreateThreadRequest?) async throws -> ThreadObject


        func createThreadAndRun(createThreadAndRunRequest: CreateThreadAndRunRequest) async throws -> RunObject


        func deleteAssistant(assistantId: String) async throws -> DeleteAssistantResponse


        func deleteMessage(threadId: String, messageId: String) async throws -> DeleteMessageResponse


        func deleteThread(threadId: String) async throws -> DeleteThreadResponse


        func getAssistant(assistantId: String) async throws -> AssistantObject


        func getMessage(threadId: String, messageId: String) async throws -> MessageObject


        func getRun(threadId: String, runId: String) async throws -> RunObject
    
        func getRun(
            threadId: String,
            runId: String,
            onReceive: @escaping (StreamingChunk) -> (),
            onFinish: @escaping () -> ()
        ) throws

        func getRunStep(threadId: String, runId: String, stepId: String, include: [Include_getRunStep]?) async throws -> RunStepObject


        func getThread(threadId: String) async throws -> ThreadObject


        func listAssistants(limit: Int?, order: Order_listAssistants?, after: String?, before: String?) async throws -> ListAssistantsResponse


        func listMessages(threadId: String, limit: Int?, order: Order_listMessages?, after: String?, before: String?, runId: String?) async throws -> ListMessagesResponse


        func listRunSteps(threadId: String, runId: String, limit: Int?, order: Order_listRunSteps?, after: String?, before: String?, include: [Include_listRunSteps]?) async throws -> ListRunStepsResponse


        func listRuns(threadId: String, limit: Int?, order: Order_listRuns?, after: String?, before: String?) async throws -> ListRunsResponse


        func modifyAssistant(assistantId: String, modifyAssistantRequest: ModifyAssistantRequest) async throws -> AssistantObject


        func modifyMessage(threadId: String, messageId: String, modifyMessageRequest: ModifyMessageRequest) async throws -> MessageObject


        func modifyRun(threadId: String, runId: String, modifyRunRequest: ModifyRunRequest) async throws -> RunObject


        func modifyThread(threadId: String, modifyThreadRequest: ModifyThreadRequest) async throws -> ThreadObject


        func submitToolOuputsToRun(threadId: String, runId: String, submitToolOutputsRunRequest: SubmitToolOutputsRunRequest) async throws -> RunObject


}

/**
 * enum for parameter include
 */
public enum Include_getRunStep: String, CaseIterable {
    case stepDetailsPeriodToolCallsLeftSquareBracketStarRightSquareBracketPeriodFileSearchPeriodResultsLeftSquareBracketStarRightSquareBracketPeriodContent = "step_details.tool_calls[*].file_search.results[*].content"
}

/**
 * enum for parameter order
 */
public enum Order_listAssistants: String, CaseIterable {
    case asc = "asc"
    case desc = "desc"
}

/**
 * enum for parameter include
 */
public enum Include_createRun: String, CaseIterable {
    case stepDetailsPeriodToolCallsLeftSquareBracketStarRightSquareBracketPeriodFileSearchPeriodResultsLeftSquareBracketStarRightSquareBracketPeriodContent = "step_details.tool_calls[*].file_search.results[*].content"
}

/**
 * enum for parameter order
 */
public enum Order_listMessages: String, CaseIterable {
    case asc = "asc"
    case desc = "desc"
}

/**
 * enum for parameter order
 */
public enum Order_listRuns: String, CaseIterable {
    case asc = "asc"
    case desc = "desc"
}

/**
 * enum for parameter include
 */
public enum Include_listRunSteps: String, CaseIterable {
    case stepDetailsPeriodToolCallsLeftSquareBracketStarRightSquareBracketPeriodFileSearchPeriodResultsLeftSquareBracketStarRightSquareBracketPeriodContent = "step_details.tool_calls[*].file_search.results[*].content"
}

/**
 * enum for parameter order
 */
public enum Order_listRunSteps: String, CaseIterable {
    case asc = "asc"
    case desc = "desc"
}
