//
// ImagesAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation

enum HTTPMethod: String {
    case get = "GET"
    case post = "POST"
    case put = "PUT"
    case delete = "DELETE"
    case head = "HEAD"
    case patch = "PATCH"
    case options = "OPTIONS"
    case trace = "TRACE"
    case connect = "CONNECT"

    init(stringValue: String) {
        guard let method = HTTPMethod(rawValue: stringValue.uppercased()) else {
            self = .get
            return
        }
        self = method
    }
}

internal struct Request {
    var url: URL
    var method: HTTPMethod
    var body: Data? = nil
    var queryParams: [URLQueryItem] = []
    var headers: [String: String] = [:]

    func urlRequest() throws -> URLRequest {
        var urlComponents = URLComponents(url: url, resolvingAgainstBaseURL: true)!
        var existingQueryItems = urlComponents.queryItems ?? []
        existingQueryItems.append(contentsOf: queryParams)
        urlComponents.queryItems = existingQueryItems
        var urlRequest = URLRequest(url: urlComponents.url!)
        headers.forEach { (k, v) in
            urlRequest.setValue(v, forHTTPHeaderField: k)
        }
        urlRequest.httpMethod = method.rawValue
        urlRequest.httpBody = body
        return urlRequest
    }
}

protocol ImagesAPITransport: Sendable {
    func execute(request: Request) async throws -> (Data, URLResponse)
}

protocol ImagesAPIClientMiddleware: Sendable {
    func intercept(
        _ request: Request,
        next: (Request) async throws -> (Data, URLResponse)
    ) async throws -> (Data, URLResponse)
}


open class ImagesAPI: ImagesAPIEndpoints, @unchecked Sendable {
    internal var transport: ImagesAPITransport
    internal var middlewares: [ImagesAPIClientMiddleware]
    internal var basePath: String
    internal var jsonDecoder: JSONDecoder

    init(basePath: String, transport: ImagesAPITransport, middlewares: [ImagesAPIClientMiddleware], jsonDecoder: JSONDecoder = JSONDecoder.default) {
        self.basePath = basePath
        self.transport = transport
        self.middlewares = middlewares
        self.jsonDecoder = jsonDecoder
    }

    func send<Response: Codable>(
        request: Request,
        deserializer: (Data) throws -> Response
    ) async throws -> Response {

        // TODO: make this a bit nicer and create an API error to make it easier to handle stuff
        func makeError(_ error: Error) -> Error {
            return error
        }

        func wrappingErrors<R>(
            work: () async throws -> R,
            mapError: (Error) -> Error
        ) async throws -> R {
            do {
                return try await work()
            } catch {
                throw mapError(error)
            }
        }

        let (data, _) = try await wrappingErrors {
            var next: (Request) async throws -> (Data, URLResponse) = { _request in
                try await wrappingErrors {
                    try await self.transport.execute(request: _request)
                } mapError: { error in
                    makeError(error)
                }
            }
            for middleware in middlewares.reversed() {
                let tmp = next
                next = {
                    try await middleware.intercept(
                        $0,
                        next: tmp
                    )
                }
            }
            return try await next(request)
        } mapError: { error in
            makeError(error)
        }

        return try await wrappingErrors {
            try deserializer(data)
        } mapError: { error in
            makeError(error)
        }
    }

    func makeRequest(
        uriPath: String,
        queryParams: [URLQueryItem] = [],
        httpMethod: String
    ) throws -> Request {
        let url = URL(string: basePath + uriPath)!
        return Request(
            url: url,
            method: .init(stringValue: httpMethod),
            queryParams: queryParams,
            headers: ["Content-Type": "application/json"]
        )
    }

    func makeRequest<T: Encodable>(
        uriPath: String,
        queryParams: [URLQueryItem] = [],
        httpMethod: String,
        request: T
    ) throws -> Request {
        var r = try makeRequest(uriPath: uriPath, queryParams: queryParams, httpMethod: httpMethod)
        r.body = try JSONEncoder().encode(request)
        return r
    }


    /**
     Creates an image given a prompt.
     
     - parameter createImageRequest: (body)  
     - returns: ImagesResponse
     */

    open func createImage(createImageRequest: CreateImageRequest) async throws -> ImagesResponse {
        let localVariablePath = "/images/generations"
        
        let urlRequest = try makeRequest(
            uriPath: localVariablePath,
            httpMethod: "POST",
            request: createImageRequest
        )
        return try await send(request: urlRequest) {
            try self.jsonDecoder.decode(ImagesResponse.self, from: $0)
        }
    }
    /**
     Creates an image given a prompt.
     - POST /images/generations
     - parameter createImageRequest: (body)  
     - returns: RequestBuilder<ImagesResponse> 
     */


    /**
     * enum for parameter size
     */
    public enum Size_createImageEdit: String, CaseIterable {
        case _256x256 = "256x256"
        case _512x512 = "512x512"
        case _1024x1024 = "1024x1024"
    }

    /**
     * enum for parameter responseFormat
     */
    public enum ResponseFormat_createImageEdit: String, CaseIterable {
        case url = "url"
        case b64Json = "b64_json"
    }

    /**
     Creates an edited or extended image given an original image and a prompt.
     
     - parameter image: (form) The image to edit. Must be a valid PNG file, less than 4MB, and square. If mask is not provided, image must have transparency, which will be used as the mask. 
     - parameter prompt: (form) A text description of the desired image(s). The maximum length is 1000 characters. 
     - parameter mask: (form) An additional image whose fully transparent areas (e.g. where alpha is zero) indicate where &#x60;image&#x60; should be edited. Must be a valid PNG file, less than 4MB, and have the same dimensions as &#x60;image&#x60;. (optional)
     - parameter model: (form)  (optional)
     - parameter n: (form) The number of images to generate. Must be between 1 and 10. (optional, default to 1)
     - parameter size: (form) The size of the generated images. Must be one of &#x60;256x256&#x60;, &#x60;512x512&#x60;, or &#x60;1024x1024&#x60;. (optional, default to ._1024x1024)
     - parameter responseFormat: (form) The format in which the generated images are returned. Must be one of &#x60;url&#x60; or &#x60;b64_json&#x60;. URLs are only valid for 60 minutes after the image has been generated. (optional, default to .url)
     - parameter user: (form) A unique identifier representing your end-user, which can help OpenAI to monitor and detect abuse. [Learn more](/docs/guides/safety-best-practices/end-user-ids).  (optional)
     - returns: ImagesResponse
     */

    open func createImageEdit(image: URL, prompt: String, mask: URL? = nil, model: CreateImageEditRequestModel? = nil, n: Int? = nil, size: Size_createImageEdit? = nil, responseFormat: ResponseFormat_createImageEdit? = nil, user: String? = nil) async throws -> ImagesResponse {
        let localVariablePath = "/images/edits"
        
        let urlRequest = try makeRequest(
            uriPath: localVariablePath,
            httpMethod: "POST"
        )
        return try await send(request: urlRequest) {
            try self.jsonDecoder.decode(ImagesResponse.self, from: $0)
        }
    }
    /**
     Creates an edited or extended image given an original image and a prompt.
     - POST /images/edits
     - parameter image: (form) The image to edit. Must be a valid PNG file, less than 4MB, and square. If mask is not provided, image must have transparency, which will be used as the mask. 
     - parameter prompt: (form) A text description of the desired image(s). The maximum length is 1000 characters. 
     - parameter mask: (form) An additional image whose fully transparent areas (e.g. where alpha is zero) indicate where &#x60;image&#x60; should be edited. Must be a valid PNG file, less than 4MB, and have the same dimensions as &#x60;image&#x60;. (optional)
     - parameter model: (form)  (optional)
     - parameter n: (form) The number of images to generate. Must be between 1 and 10. (optional, default to 1)
     - parameter size: (form) The size of the generated images. Must be one of &#x60;256x256&#x60;, &#x60;512x512&#x60;, or &#x60;1024x1024&#x60;. (optional, default to ._1024x1024)
     - parameter responseFormat: (form) The format in which the generated images are returned. Must be one of &#x60;url&#x60; or &#x60;b64_json&#x60;. URLs are only valid for 60 minutes after the image has been generated. (optional, default to .url)
     - parameter user: (form) A unique identifier representing your end-user, which can help OpenAI to monitor and detect abuse. [Learn more](/docs/guides/safety-best-practices/end-user-ids).  (optional)
     - returns: RequestBuilder<ImagesResponse> 
     */


    /**
     * enum for parameter responseFormat
     */
    public enum ResponseFormat_createImageVariation: String, CaseIterable {
        case url = "url"
        case b64Json = "b64_json"
    }

    /**
     * enum for parameter size
     */
    public enum Size_createImageVariation: String, CaseIterable {
        case _256x256 = "256x256"
        case _512x512 = "512x512"
        case _1024x1024 = "1024x1024"
    }

    /**
     Creates a variation of a given image.
     
     - parameter image: (form) The image to use as the basis for the variation(s). Must be a valid PNG file, less than 4MB, and square. 
     - parameter model: (form)  (optional)
     - parameter n: (form) The number of images to generate. Must be between 1 and 10. For &#x60;dall-e-3&#x60;, only &#x60;n&#x3D;1&#x60; is supported. (optional, default to 1)
     - parameter responseFormat: (form) The format in which the generated images are returned. Must be one of &#x60;url&#x60; or &#x60;b64_json&#x60;. URLs are only valid for 60 minutes after the image has been generated. (optional, default to .url)
     - parameter size: (form) The size of the generated images. Must be one of &#x60;256x256&#x60;, &#x60;512x512&#x60;, or &#x60;1024x1024&#x60;. (optional, default to ._1024x1024)
     - parameter user: (form) A unique identifier representing your end-user, which can help OpenAI to monitor and detect abuse. [Learn more](/docs/guides/safety-best-practices/end-user-ids).  (optional)
     - returns: ImagesResponse
     */

    open func createImageVariation(image: URL, model: CreateImageEditRequestModel? = nil, n: Int? = nil, responseFormat: ResponseFormat_createImageVariation? = nil, size: Size_createImageVariation? = nil, user: String? = nil) async throws -> ImagesResponse {
        let localVariablePath = "/images/variations"
        
        let urlRequest = try makeRequest(
            uriPath: localVariablePath,
            httpMethod: "POST"
        )
        return try await send(request: urlRequest) {
            try self.jsonDecoder.decode(ImagesResponse.self, from: $0)
        }
    }
    /**
     Creates a variation of a given image.
     - POST /images/variations
     - parameter image: (form) The image to use as the basis for the variation(s). Must be a valid PNG file, less than 4MB, and square. 
     - parameter model: (form)  (optional)
     - parameter n: (form) The number of images to generate. Must be between 1 and 10. For &#x60;dall-e-3&#x60;, only &#x60;n&#x3D;1&#x60; is supported. (optional, default to 1)
     - parameter responseFormat: (form) The format in which the generated images are returned. Must be one of &#x60;url&#x60; or &#x60;b64_json&#x60;. URLs are only valid for 60 minutes after the image has been generated. (optional, default to .url)
     - parameter size: (form) The size of the generated images. Must be one of &#x60;256x256&#x60;, &#x60;512x512&#x60;, or &#x60;1024x1024&#x60;. (optional, default to ._1024x1024)
     - parameter user: (form) A unique identifier representing your end-user, which can help OpenAI to monitor and detect abuse. [Learn more](/docs/guides/safety-best-practices/end-user-ids).  (optional)
     - returns: RequestBuilder<ImagesResponse> 
     */

}

protocol ImagesAPIEndpoints {


        func createImage(createImageRequest: CreateImageRequest) async throws -> ImagesResponse


        func createImageEdit(image: URL, prompt: String, mask: URL?, model: CreateImageEditRequestModel?, n: Int?, size: Size_createImageEdit?, responseFormat: ResponseFormat_createImageEdit?, user: String?) async throws -> ImagesResponse


        func createImageVariation(image: URL, model: CreateImageEditRequestModel?, n: Int?, responseFormat: ResponseFormat_createImageVariation?, size: Size_createImageVariation?, user: String?) async throws -> ImagesResponse


}

