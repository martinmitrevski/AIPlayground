//
// ProjectsAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation

enum HTTPMethod: String {
    case get = "GET"
    case post = "POST"
    case put = "PUT"
    case delete = "DELETE"
    case head = "HEAD"
    case patch = "PATCH"
    case options = "OPTIONS"
    case trace = "TRACE"
    case connect = "CONNECT"

    init(stringValue: String) {
        guard let method = HTTPMethod(rawValue: stringValue.uppercased()) else {
            self = .get
            return
        }
        self = method
    }
}

internal struct Request {
    var url: URL
    var method: HTTPMethod
    var body: Data? = nil
    var queryParams: [URLQueryItem] = []
    var headers: [String: String] = [:]

    func urlRequest() throws -> URLRequest {
        var urlComponents = URLComponents(url: url, resolvingAgainstBaseURL: true)!
        var existingQueryItems = urlComponents.queryItems ?? []
        existingQueryItems.append(contentsOf: queryParams)
        urlComponents.queryItems = existingQueryItems
        var urlRequest = URLRequest(url: urlComponents.url!)
        headers.forEach { (k, v) in
            urlRequest.setValue(v, forHTTPHeaderField: k)
        }
        urlRequest.httpMethod = method.rawValue
        urlRequest.httpBody = body
        return urlRequest
    }
}

protocol ProjectsAPITransport: Sendable {
    func execute(request: Request) async throws -> (Data, URLResponse)
}

protocol ProjectsAPIClientMiddleware: Sendable {
    func intercept(
        _ request: Request,
        next: (Request) async throws -> (Data, URLResponse)
    ) async throws -> (Data, URLResponse)
}


open class ProjectsAPI: ProjectsAPIEndpoints, @unchecked Sendable {
    internal var transport: ProjectsAPITransport
    internal var middlewares: [ProjectsAPIClientMiddleware]
    internal var basePath: String
    internal var jsonDecoder: JSONDecoder

    init(basePath: String, transport: ProjectsAPITransport, middlewares: [ProjectsAPIClientMiddleware], jsonDecoder: JSONDecoder = JSONDecoder.default) {
        self.basePath = basePath
        self.transport = transport
        self.middlewares = middlewares
        self.jsonDecoder = jsonDecoder
    }

    func send<Response: Codable>(
        request: Request,
        deserializer: (Data) throws -> Response
    ) async throws -> Response {

        // TODO: make this a bit nicer and create an API error to make it easier to handle stuff
        func makeError(_ error: Error) -> Error {
            return error
        }

        func wrappingErrors<R>(
            work: () async throws -> R,
            mapError: (Error) -> Error
        ) async throws -> R {
            do {
                return try await work()
            } catch {
                throw mapError(error)
            }
        }

        let (data, _) = try await wrappingErrors {
            var next: (Request) async throws -> (Data, URLResponse) = { _request in
                try await wrappingErrors {
                    try await self.transport.execute(request: _request)
                } mapError: { error in
                    makeError(error)
                }
            }
            for middleware in middlewares.reversed() {
                let tmp = next
                next = {
                    try await middleware.intercept(
                        $0,
                        next: tmp
                    )
                }
            }
            return try await next(request)
        } mapError: { error in
            makeError(error)
        }

        return try await wrappingErrors {
            try deserializer(data)
        } mapError: { error in
            makeError(error)
        }
    }

    func makeRequest(
        uriPath: String,
        queryParams: [URLQueryItem] = [],
        httpMethod: String
    ) throws -> Request {
        let url = URL(string: basePath + uriPath)!
        return Request(
            url: url,
            method: .init(stringValue: httpMethod),
            queryParams: queryParams,
            headers: ["Content-Type": "application/json"]
        )
    }

    func makeRequest<T: Encodable>(
        uriPath: String,
        queryParams: [URLQueryItem] = [],
        httpMethod: String,
        request: T
    ) throws -> Request {
        var r = try makeRequest(uriPath: uriPath, queryParams: queryParams, httpMethod: httpMethod)
        r.body = try JSONEncoder().encode(request)
        return r
    }


    /**
     Archives a project in the organization. Archived projects cannot be used or updated.
     
     - parameter projectId: (path) The ID of the project. 
     - returns: Project
     */

    open func archiveProject(projectId: String) async throws -> Project {
        var localVariablePath = "/organization/projects/{project_id}/archive"
        let projectIdPreEscape = "\(APIHelper.mapValueToPathItem(projectId))"
        let projectIdPostEscape = projectIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{project_id}", with: projectIdPostEscape, options: .literal, range: nil)
        
        let urlRequest = try makeRequest(
            uriPath: localVariablePath,
            httpMethod: "POST"
        )
        return try await send(request: urlRequest) {
            try self.jsonDecoder.decode(Project.self, from: $0)
        }
    }
    /**
     Archives a project in the organization. Archived projects cannot be used or updated.
     - POST /organization/projects/{project_id}/archive
     - parameter projectId: (path) The ID of the project. 
     - returns: RequestBuilder<Project> 
     */


    /**
     Create a new project in the organization. Projects can be created and archived, but cannot be deleted.
     
     - parameter projectCreateRequest: (body) The project create request payload. 
     - returns: Project
     */

    open func createProject(projectCreateRequest: ProjectCreateRequest) async throws -> Project {
        let localVariablePath = "/organization/projects"
        
        let urlRequest = try makeRequest(
            uriPath: localVariablePath,
            httpMethod: "POST",
            request: projectCreateRequest
        )
        return try await send(request: urlRequest) {
            try self.jsonDecoder.decode(Project.self, from: $0)
        }
    }
    /**
     Create a new project in the organization. Projects can be created and archived, but cannot be deleted.
     - POST /organization/projects
     - parameter projectCreateRequest: (body) The project create request payload. 
     - returns: RequestBuilder<Project> 
     */


    /**
     Creates a new service account in the project. This also returns an unredacted API key for the service account.
     
     - parameter projectId: (path) The ID of the project. 
     - parameter projectServiceAccountCreateRequest: (body) The project service account create request payload. 
     - returns: ProjectServiceAccountCreateResponse
     */

    open func createProjectServiceAccount(projectId: String, projectServiceAccountCreateRequest: ProjectServiceAccountCreateRequest) async throws -> ProjectServiceAccountCreateResponse {
        var localVariablePath = "/organization/projects/{project_id}/service_accounts"
        let projectIdPreEscape = "\(APIHelper.mapValueToPathItem(projectId))"
        let projectIdPostEscape = projectIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{project_id}", with: projectIdPostEscape, options: .literal, range: nil)
        
        let urlRequest = try makeRequest(
            uriPath: localVariablePath,
            httpMethod: "POST",
            request: projectServiceAccountCreateRequest
        )
        return try await send(request: urlRequest) {
            try self.jsonDecoder.decode(ProjectServiceAccountCreateResponse.self, from: $0)
        }
    }
    /**
     Creates a new service account in the project. This also returns an unredacted API key for the service account.
     - POST /organization/projects/{project_id}/service_accounts
     - parameter projectId: (path) The ID of the project. 
     - parameter projectServiceAccountCreateRequest: (body) The project service account create request payload. 
     - returns: RequestBuilder<ProjectServiceAccountCreateResponse> 
     */


    /**
     Adds a user to the project. Users must already be members of the organization to be added to a project.
     
     - parameter projectId: (path) The ID of the project. 
     - parameter projectUserCreateRequest: (body) The project user create request payload. 
     - returns: ProjectUser
     */

    open func createProjectUser(projectId: String, projectUserCreateRequest: ProjectUserCreateRequest) async throws -> ProjectUser {
        var localVariablePath = "/organization/projects/{project_id}/users"
        let projectIdPreEscape = "\(APIHelper.mapValueToPathItem(projectId))"
        let projectIdPostEscape = projectIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{project_id}", with: projectIdPostEscape, options: .literal, range: nil)
        
        let urlRequest = try makeRequest(
            uriPath: localVariablePath,
            httpMethod: "POST",
            request: projectUserCreateRequest
        )
        return try await send(request: urlRequest) {
            try self.jsonDecoder.decode(ProjectUser.self, from: $0)
        }
    }
    /**
     Adds a user to the project. Users must already be members of the organization to be added to a project.
     - POST /organization/projects/{project_id}/users
     - parameter projectId: (path) The ID of the project. 
     - parameter projectUserCreateRequest: (body) The project user create request payload. 
     - returns: RequestBuilder<ProjectUser> 
     */


    /**
     Deletes an API key from the project.
     
     - parameter projectId: (path) The ID of the project. 
     - parameter keyId: (path) The ID of the API key. 
     - returns: ProjectApiKeyDeleteResponse
     */

    open func deleteProjectApiKey(projectId: String, keyId: String) async throws -> ProjectApiKeyDeleteResponse {
        var localVariablePath = "/organization/projects/{project_id}/api_keys/{key_id}"
        let projectIdPreEscape = "\(APIHelper.mapValueToPathItem(projectId))"
        let projectIdPostEscape = projectIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{project_id}", with: projectIdPostEscape, options: .literal, range: nil)
        let keyIdPreEscape = "\(APIHelper.mapValueToPathItem(keyId))"
        let keyIdPostEscape = keyIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{key_id}", with: keyIdPostEscape, options: .literal, range: nil)
        
        let urlRequest = try makeRequest(
            uriPath: localVariablePath,
            httpMethod: "DELETE"
        )
        return try await send(request: urlRequest) {
            try self.jsonDecoder.decode(ProjectApiKeyDeleteResponse.self, from: $0)
        }
    }
    /**
     Deletes an API key from the project.
     - DELETE /organization/projects/{project_id}/api_keys/{key_id}
     - parameter projectId: (path) The ID of the project. 
     - parameter keyId: (path) The ID of the API key. 
     - returns: RequestBuilder<ProjectApiKeyDeleteResponse> 
     */


    /**
     Deletes a service account from the project.
     
     - parameter projectId: (path) The ID of the project. 
     - parameter serviceAccountId: (path) The ID of the service account. 
     - returns: ProjectServiceAccountDeleteResponse
     */

    open func deleteProjectServiceAccount(projectId: String, serviceAccountId: String) async throws -> ProjectServiceAccountDeleteResponse {
        var localVariablePath = "/organization/projects/{project_id}/service_accounts/{service_account_id}"
        let projectIdPreEscape = "\(APIHelper.mapValueToPathItem(projectId))"
        let projectIdPostEscape = projectIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{project_id}", with: projectIdPostEscape, options: .literal, range: nil)
        let serviceAccountIdPreEscape = "\(APIHelper.mapValueToPathItem(serviceAccountId))"
        let serviceAccountIdPostEscape = serviceAccountIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{service_account_id}", with: serviceAccountIdPostEscape, options: .literal, range: nil)
        
        let urlRequest = try makeRequest(
            uriPath: localVariablePath,
            httpMethod: "DELETE"
        )
        return try await send(request: urlRequest) {
            try self.jsonDecoder.decode(ProjectServiceAccountDeleteResponse.self, from: $0)
        }
    }
    /**
     Deletes a service account from the project.
     - DELETE /organization/projects/{project_id}/service_accounts/{service_account_id}
     - parameter projectId: (path) The ID of the project. 
     - parameter serviceAccountId: (path) The ID of the service account. 
     - returns: RequestBuilder<ProjectServiceAccountDeleteResponse> 
     */


    /**
     Deletes a user from the project.
     
     - parameter projectId: (path) The ID of the project. 
     - parameter userId: (path) The ID of the user. 
     - returns: ProjectUserDeleteResponse
     */

    open func deleteProjectUser(projectId: String, userId: String) async throws -> ProjectUserDeleteResponse {
        var localVariablePath = "/organization/projects/{project_id}/users/{user_id}"
        let projectIdPreEscape = "\(APIHelper.mapValueToPathItem(projectId))"
        let projectIdPostEscape = projectIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{project_id}", with: projectIdPostEscape, options: .literal, range: nil)
        let userIdPreEscape = "\(APIHelper.mapValueToPathItem(userId))"
        let userIdPostEscape = userIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{user_id}", with: userIdPostEscape, options: .literal, range: nil)
        
        let urlRequest = try makeRequest(
            uriPath: localVariablePath,
            httpMethod: "DELETE"
        )
        return try await send(request: urlRequest) {
            try self.jsonDecoder.decode(ProjectUserDeleteResponse.self, from: $0)
        }
    }
    /**
     Deletes a user from the project.
     - DELETE /organization/projects/{project_id}/users/{user_id}
     - parameter projectId: (path) The ID of the project. 
     - parameter userId: (path) The ID of the user. 
     - returns: RequestBuilder<ProjectUserDeleteResponse> 
     */


    /**
     Returns a list of API keys in the project.
     
     - parameter projectId: (path) The ID of the project. 
     - parameter limit: (query) A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20.  (optional, default to 20)
     - parameter after: (query) A cursor for use in pagination. &#x60;after&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after&#x3D;obj_foo in order to fetch the next page of the list.  (optional)
     - returns: ProjectApiKeyListResponse
     */

    open func listProjectApiKeys(projectId: String, limit: Int? = nil, after: String? = nil) async throws -> ProjectApiKeyListResponse {
        var localVariablePath = "/organization/projects/{project_id}/api_keys"
        let projectIdPreEscape = "\(APIHelper.mapValueToPathItem(projectId))"
        let projectIdPostEscape = projectIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{project_id}", with: projectIdPostEscape, options: .literal, range: nil)
        let queryParams = APIHelper.mapValuesToQueryItems([
            "limit": (wrappedValue: limit?.encodeToJSON(), isExplode: true),
            "after": (wrappedValue: after?.encodeToJSON(), isExplode: true),
        ])
        let urlRequest = try makeRequest(
            uriPath: localVariablePath,
            queryParams: queryParams ?? [],
            httpMethod: "GET"
        )
        return try await send(request: urlRequest) {
            try self.jsonDecoder.decode(ProjectApiKeyListResponse.self, from: $0)
        }
    }
    /**
     Returns a list of API keys in the project.
     - GET /organization/projects/{project_id}/api_keys
     - parameter projectId: (path) The ID of the project. 
     - parameter limit: (query) A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20.  (optional, default to 20)
     - parameter after: (query) A cursor for use in pagination. &#x60;after&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after&#x3D;obj_foo in order to fetch the next page of the list.  (optional)
     - returns: RequestBuilder<ProjectApiKeyListResponse> 
     */


    /**
     Returns a list of service accounts in the project.
     
     - parameter projectId: (path) The ID of the project. 
     - parameter limit: (query) A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20.  (optional, default to 20)
     - parameter after: (query) A cursor for use in pagination. &#x60;after&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after&#x3D;obj_foo in order to fetch the next page of the list.  (optional)
     - returns: ProjectServiceAccountListResponse
     */

    open func listProjectServiceAccounts(projectId: String, limit: Int? = nil, after: String? = nil) async throws -> ProjectServiceAccountListResponse {
        var localVariablePath = "/organization/projects/{project_id}/service_accounts"
        let projectIdPreEscape = "\(APIHelper.mapValueToPathItem(projectId))"
        let projectIdPostEscape = projectIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{project_id}", with: projectIdPostEscape, options: .literal, range: nil)
        let queryParams = APIHelper.mapValuesToQueryItems([
            "limit": (wrappedValue: limit?.encodeToJSON(), isExplode: true),
            "after": (wrappedValue: after?.encodeToJSON(), isExplode: true),
        ])
        let urlRequest = try makeRequest(
            uriPath: localVariablePath,
            queryParams: queryParams ?? [],
            httpMethod: "GET"
        )
        return try await send(request: urlRequest) {
            try self.jsonDecoder.decode(ProjectServiceAccountListResponse.self, from: $0)
        }
    }
    /**
     Returns a list of service accounts in the project.
     - GET /organization/projects/{project_id}/service_accounts
     - parameter projectId: (path) The ID of the project. 
     - parameter limit: (query) A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20.  (optional, default to 20)
     - parameter after: (query) A cursor for use in pagination. &#x60;after&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after&#x3D;obj_foo in order to fetch the next page of the list.  (optional)
     - returns: RequestBuilder<ProjectServiceAccountListResponse> 
     */


    /**
     Returns a list of users in the project.
     
     - parameter projectId: (path) The ID of the project. 
     - parameter limit: (query) A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20.  (optional, default to 20)
     - parameter after: (query) A cursor for use in pagination. &#x60;after&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after&#x3D;obj_foo in order to fetch the next page of the list.  (optional)
     - returns: ProjectUserListResponse
     */

    open func listProjectUsers(projectId: String, limit: Int? = nil, after: String? = nil) async throws -> ProjectUserListResponse {
        var localVariablePath = "/organization/projects/{project_id}/users"
        let projectIdPreEscape = "\(APIHelper.mapValueToPathItem(projectId))"
        let projectIdPostEscape = projectIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{project_id}", with: projectIdPostEscape, options: .literal, range: nil)
        let queryParams = APIHelper.mapValuesToQueryItems([
            "limit": (wrappedValue: limit?.encodeToJSON(), isExplode: true),
            "after": (wrappedValue: after?.encodeToJSON(), isExplode: true),
        ])
        let urlRequest = try makeRequest(
            uriPath: localVariablePath,
            queryParams: queryParams ?? [],
            httpMethod: "GET"
        )
        return try await send(request: urlRequest) {
            try self.jsonDecoder.decode(ProjectUserListResponse.self, from: $0)
        }
    }
    /**
     Returns a list of users in the project.
     - GET /organization/projects/{project_id}/users
     - parameter projectId: (path) The ID of the project. 
     - parameter limit: (query) A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20.  (optional, default to 20)
     - parameter after: (query) A cursor for use in pagination. &#x60;after&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after&#x3D;obj_foo in order to fetch the next page of the list.  (optional)
     - returns: RequestBuilder<ProjectUserListResponse> 
     */


    /**
     Returns a list of projects.
     
     - parameter limit: (query) A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20.  (optional, default to 20)
     - parameter after: (query) A cursor for use in pagination. &#x60;after&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after&#x3D;obj_foo in order to fetch the next page of the list.  (optional)
     - parameter includeArchived: (query) If &#x60;true&#x60; returns all projects including those that have been &#x60;archived&#x60;. Archived projects are not included by default. (optional, default to false)
     - returns: ProjectListResponse
     */

    open func listProjects(limit: Int? = nil, after: String? = nil, includeArchived: Bool? = nil) async throws -> ProjectListResponse {
        let localVariablePath = "/organization/projects"
        let queryParams = APIHelper.mapValuesToQueryItems([
            "limit": (wrappedValue: limit?.encodeToJSON(), isExplode: true),
            "after": (wrappedValue: after?.encodeToJSON(), isExplode: true),
            "include_archived": (wrappedValue: includeArchived?.encodeToJSON(), isExplode: true),
        ])
        let urlRequest = try makeRequest(
            uriPath: localVariablePath,
            queryParams: queryParams ?? [],
            httpMethod: "GET"
        )
        return try await send(request: urlRequest) {
            try self.jsonDecoder.decode(ProjectListResponse.self, from: $0)
        }
    }
    /**
     Returns a list of projects.
     - GET /organization/projects
     - parameter limit: (query) A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20.  (optional, default to 20)
     - parameter after: (query) A cursor for use in pagination. &#x60;after&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after&#x3D;obj_foo in order to fetch the next page of the list.  (optional)
     - parameter includeArchived: (query) If &#x60;true&#x60; returns all projects including those that have been &#x60;archived&#x60;. Archived projects are not included by default. (optional, default to false)
     - returns: RequestBuilder<ProjectListResponse> 
     */


    /**
     Modifies a project in the organization.
     
     - parameter projectUpdateRequest: (body) The project update request payload. 
     - returns: Project
     */

    open func modifyProject(projectUpdateRequest: ProjectUpdateRequest) async throws -> Project {
        let localVariablePath = "/organization/projects/{project_id}"
        
        let urlRequest = try makeRequest(
            uriPath: localVariablePath,
            httpMethod: "POST",
            request: projectUpdateRequest
        )
        return try await send(request: urlRequest) {
            try self.jsonDecoder.decode(Project.self, from: $0)
        }
    }
    /**
     Modifies a project in the organization.
     - POST /organization/projects/{project_id}
     - parameter projectUpdateRequest: (body) The project update request payload. 
     - returns: RequestBuilder<Project> 
     */


    /**
     Modifies a user's role in the project.
     
     - parameter projectUserUpdateRequest: (body) The project user update request payload. 
     - returns: ProjectUser
     */

    open func modifyProjectUser(projectUserUpdateRequest: ProjectUserUpdateRequest) async throws -> ProjectUser {
        let localVariablePath = "/organization/projects/{project_id}/users/{user_id}"
        
        let urlRequest = try makeRequest(
            uriPath: localVariablePath,
            httpMethod: "POST",
            request: projectUserUpdateRequest
        )
        return try await send(request: urlRequest) {
            try self.jsonDecoder.decode(ProjectUser.self, from: $0)
        }
    }
    /**
     Modifies a user's role in the project.
     - POST /organization/projects/{project_id}/users/{user_id}
     - parameter projectUserUpdateRequest: (body) The project user update request payload. 
     - returns: RequestBuilder<ProjectUser> 
     */


    /**
     Retrieves a project.
     
     - parameter projectId: (path) The ID of the project. 
     - returns: Project
     */

    open func retrieveProject(projectId: String) async throws -> Project {
        var localVariablePath = "/organization/projects/{project_id}"
        let projectIdPreEscape = "\(APIHelper.mapValueToPathItem(projectId))"
        let projectIdPostEscape = projectIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{project_id}", with: projectIdPostEscape, options: .literal, range: nil)
        
        let urlRequest = try makeRequest(
            uriPath: localVariablePath,
            httpMethod: "GET"
        )
        return try await send(request: urlRequest) {
            try self.jsonDecoder.decode(Project.self, from: $0)
        }
    }
    /**
     Retrieves a project.
     - GET /organization/projects/{project_id}
     - parameter projectId: (path) The ID of the project. 
     - returns: RequestBuilder<Project> 
     */


    /**
     Retrieves an API key in the project.
     
     - parameter projectId: (path) The ID of the project. 
     - parameter keyId: (path) The ID of the API key. 
     - returns: ProjectApiKey
     */

    open func retrieveProjectApiKey(projectId: String, keyId: String) async throws -> ProjectApiKey {
        var localVariablePath = "/organization/projects/{project_id}/api_keys/{key_id}"
        let projectIdPreEscape = "\(APIHelper.mapValueToPathItem(projectId))"
        let projectIdPostEscape = projectIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{project_id}", with: projectIdPostEscape, options: .literal, range: nil)
        let keyIdPreEscape = "\(APIHelper.mapValueToPathItem(keyId))"
        let keyIdPostEscape = keyIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{key_id}", with: keyIdPostEscape, options: .literal, range: nil)
        
        let urlRequest = try makeRequest(
            uriPath: localVariablePath,
            httpMethod: "GET"
        )
        return try await send(request: urlRequest) {
            try self.jsonDecoder.decode(ProjectApiKey.self, from: $0)
        }
    }
    /**
     Retrieves an API key in the project.
     - GET /organization/projects/{project_id}/api_keys/{key_id}
     - parameter projectId: (path) The ID of the project. 
     - parameter keyId: (path) The ID of the API key. 
     - returns: RequestBuilder<ProjectApiKey> 
     */


    /**
     Retrieves a service account in the project.
     
     - parameter projectId: (path) The ID of the project. 
     - parameter serviceAccountId: (path) The ID of the service account. 
     - returns: ProjectServiceAccount
     */

    open func retrieveProjectServiceAccount(projectId: String, serviceAccountId: String) async throws -> ProjectServiceAccount {
        var localVariablePath = "/organization/projects/{project_id}/service_accounts/{service_account_id}"
        let projectIdPreEscape = "\(APIHelper.mapValueToPathItem(projectId))"
        let projectIdPostEscape = projectIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{project_id}", with: projectIdPostEscape, options: .literal, range: nil)
        let serviceAccountIdPreEscape = "\(APIHelper.mapValueToPathItem(serviceAccountId))"
        let serviceAccountIdPostEscape = serviceAccountIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{service_account_id}", with: serviceAccountIdPostEscape, options: .literal, range: nil)
        
        let urlRequest = try makeRequest(
            uriPath: localVariablePath,
            httpMethod: "GET"
        )
        return try await send(request: urlRequest) {
            try self.jsonDecoder.decode(ProjectServiceAccount.self, from: $0)
        }
    }
    /**
     Retrieves a service account in the project.
     - GET /organization/projects/{project_id}/service_accounts/{service_account_id}
     - parameter projectId: (path) The ID of the project. 
     - parameter serviceAccountId: (path) The ID of the service account. 
     - returns: RequestBuilder<ProjectServiceAccount> 
     */


    /**
     Retrieves a user in the project.
     
     - parameter projectId: (path) The ID of the project. 
     - parameter userId: (path) The ID of the user. 
     - returns: ProjectUser
     */

    open func retrieveProjectUser(projectId: String, userId: String) async throws -> ProjectUser {
        var localVariablePath = "/organization/projects/{project_id}/users/{user_id}"
        let projectIdPreEscape = "\(APIHelper.mapValueToPathItem(projectId))"
        let projectIdPostEscape = projectIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{project_id}", with: projectIdPostEscape, options: .literal, range: nil)
        let userIdPreEscape = "\(APIHelper.mapValueToPathItem(userId))"
        let userIdPostEscape = userIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{user_id}", with: userIdPostEscape, options: .literal, range: nil)
        
        let urlRequest = try makeRequest(
            uriPath: localVariablePath,
            httpMethod: "GET"
        )
        return try await send(request: urlRequest) {
            try self.jsonDecoder.decode(ProjectUser.self, from: $0)
        }
    }
    /**
     Retrieves a user in the project.
     - GET /organization/projects/{project_id}/users/{user_id}
     - parameter projectId: (path) The ID of the project. 
     - parameter userId: (path) The ID of the user. 
     - returns: RequestBuilder<ProjectUser> 
     */

}

protocol ProjectsAPIEndpoints {


        func archiveProject(projectId: String) async throws -> Project


        func createProject(projectCreateRequest: ProjectCreateRequest) async throws -> Project


        func createProjectServiceAccount(projectId: String, projectServiceAccountCreateRequest: ProjectServiceAccountCreateRequest) async throws -> ProjectServiceAccountCreateResponse


        func createProjectUser(projectId: String, projectUserCreateRequest: ProjectUserCreateRequest) async throws -> ProjectUser


        func deleteProjectApiKey(projectId: String, keyId: String) async throws -> ProjectApiKeyDeleteResponse


        func deleteProjectServiceAccount(projectId: String, serviceAccountId: String) async throws -> ProjectServiceAccountDeleteResponse


        func deleteProjectUser(projectId: String, userId: String) async throws -> ProjectUserDeleteResponse


        func listProjectApiKeys(projectId: String, limit: Int?, after: String?) async throws -> ProjectApiKeyListResponse


        func listProjectServiceAccounts(projectId: String, limit: Int?, after: String?) async throws -> ProjectServiceAccountListResponse


        func listProjectUsers(projectId: String, limit: Int?, after: String?) async throws -> ProjectUserListResponse


        func listProjects(limit: Int?, after: String?, includeArchived: Bool?) async throws -> ProjectListResponse


        func modifyProject(projectUpdateRequest: ProjectUpdateRequest) async throws -> Project


        func modifyProjectUser(projectUserUpdateRequest: ProjectUserUpdateRequest) async throws -> ProjectUser


        func retrieveProject(projectId: String) async throws -> Project


        func retrieveProjectApiKey(projectId: String, keyId: String) async throws -> ProjectApiKey


        func retrieveProjectServiceAccount(projectId: String, serviceAccountId: String) async throws -> ProjectServiceAccount


        func retrieveProjectUser(projectId: String, userId: String) async throws -> ProjectUser


}

