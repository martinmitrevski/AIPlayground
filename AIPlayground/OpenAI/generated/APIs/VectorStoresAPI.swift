//
// VectorStoresAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation

enum HTTPMethod: String {
    case get = "GET"
    case post = "POST"
    case put = "PUT"
    case delete = "DELETE"
    case head = "HEAD"
    case patch = "PATCH"
    case options = "OPTIONS"
    case trace = "TRACE"
    case connect = "CONNECT"

    init(stringValue: String) {
        guard let method = HTTPMethod(rawValue: stringValue.uppercased()) else {
            self = .get
            return
        }
        self = method
    }
}

internal struct Request {
    var url: URL
    var method: HTTPMethod
    var body: Data? = nil
    var queryParams: [URLQueryItem] = []
    var headers: [String: String] = [:]

    func urlRequest() throws -> URLRequest {
        var urlComponents = URLComponents(url: url, resolvingAgainstBaseURL: true)!
        var existingQueryItems = urlComponents.queryItems ?? []
        existingQueryItems.append(contentsOf: queryParams)
        urlComponents.queryItems = existingQueryItems
        var urlRequest = URLRequest(url: urlComponents.url!)
        headers.forEach { (k, v) in
            urlRequest.setValue(v, forHTTPHeaderField: k)
        }
        urlRequest.httpMethod = method.rawValue
        urlRequest.httpBody = body
        return urlRequest
    }
}

protocol VectorStoresAPITransport: Sendable {
    func execute(request: Request) async throws -> (Data, URLResponse)
}

protocol VectorStoresAPIClientMiddleware: Sendable {
    func intercept(
        _ request: Request,
        next: (Request) async throws -> (Data, URLResponse)
    ) async throws -> (Data, URLResponse)
}


open class VectorStoresAPI: VectorStoresAPIEndpoints, @unchecked Sendable {
    internal var transport: VectorStoresAPITransport
    internal var middlewares: [VectorStoresAPIClientMiddleware]
    internal var basePath: String
    internal var jsonDecoder: JSONDecoder

    init(basePath: String, transport: VectorStoresAPITransport, middlewares: [VectorStoresAPIClientMiddleware], jsonDecoder: JSONDecoder = JSONDecoder.default) {
        self.basePath = basePath
        self.transport = transport
        self.middlewares = middlewares
        self.jsonDecoder = jsonDecoder
    }

    func send<Response: Codable>(
        request: Request,
        deserializer: (Data) throws -> Response
    ) async throws -> Response {

        // TODO: make this a bit nicer and create an API error to make it easier to handle stuff
        func makeError(_ error: Error) -> Error {
            return error
        }

        func wrappingErrors<R>(
            work: () async throws -> R,
            mapError: (Error) -> Error
        ) async throws -> R {
            do {
                return try await work()
            } catch {
                throw mapError(error)
            }
        }

        let (data, _) = try await wrappingErrors {
            var next: (Request) async throws -> (Data, URLResponse) = { _request in
                try await wrappingErrors {
                    try await self.transport.execute(request: _request)
                } mapError: { error in
                    makeError(error)
                }
            }
            for middleware in middlewares.reversed() {
                let tmp = next
                next = {
                    try await middleware.intercept(
                        $0,
                        next: tmp
                    )
                }
            }
            return try await next(request)
        } mapError: { error in
            makeError(error)
        }

        return try await wrappingErrors {
            try deserializer(data)
        } mapError: { error in
            makeError(error)
        }
    }

    func makeRequest(
        uriPath: String,
        queryParams: [URLQueryItem] = [],
        httpMethod: String
    ) throws -> Request {
        let url = URL(string: basePath + uriPath)!
        return Request(
            url: url,
            method: .init(stringValue: httpMethod),
            queryParams: queryParams,
            headers: ["Content-Type": "application/json"]
        )
    }

    func makeRequest<T: Encodable>(
        uriPath: String,
        queryParams: [URLQueryItem] = [],
        httpMethod: String,
        request: T
    ) throws -> Request {
        var r = try makeRequest(uriPath: uriPath, queryParams: queryParams, httpMethod: httpMethod)
        r.body = try JSONEncoder().encode(request)
        return r
    }


    /**
     Cancel a vector store file batch. This attempts to cancel the processing of files in this batch as soon as possible.
     
     - parameter vectorStoreId: (path) The ID of the vector store that the file batch belongs to. 
     - parameter batchId: (path) The ID of the file batch to cancel. 
     - returns: VectorStoreFileBatchObject
     */

    open func cancelVectorStoreFileBatch(vectorStoreId: String, batchId: String) async throws -> VectorStoreFileBatchObject {
        var localVariablePath = "/vector_stores/{vector_store_id}/file_batches/{batch_id}/cancel"
        let vectorStoreIdPreEscape = "\(APIHelper.mapValueToPathItem(vectorStoreId))"
        let vectorStoreIdPostEscape = vectorStoreIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{vector_store_id}", with: vectorStoreIdPostEscape, options: .literal, range: nil)
        let batchIdPreEscape = "\(APIHelper.mapValueToPathItem(batchId))"
        let batchIdPostEscape = batchIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{batch_id}", with: batchIdPostEscape, options: .literal, range: nil)
        
        let urlRequest = try makeRequest(
            uriPath: localVariablePath,
            httpMethod: "POST"
        )
        return try await send(request: urlRequest) {
            try self.jsonDecoder.decode(VectorStoreFileBatchObject.self, from: $0)
        }
    }
    /**
     Cancel a vector store file batch. This attempts to cancel the processing of files in this batch as soon as possible.
     - POST /vector_stores/{vector_store_id}/file_batches/{batch_id}/cancel
     - parameter vectorStoreId: (path) The ID of the vector store that the file batch belongs to. 
     - parameter batchId: (path) The ID of the file batch to cancel. 
     - returns: RequestBuilder<VectorStoreFileBatchObject> 
     */


    /**
     Create a vector store.
     
     - parameter createVectorStoreRequest: (body)  
     - returns: VectorStoreObject
     */

    open func createVectorStore(createVectorStoreRequest: CreateVectorStoreRequest) async throws -> VectorStoreObject {
        let localVariablePath = "/vector_stores"
        
        let urlRequest = try makeRequest(
            uriPath: localVariablePath,
            httpMethod: "POST",
            request: createVectorStoreRequest
        )
        return try await send(request: urlRequest) {
            try self.jsonDecoder.decode(VectorStoreObject.self, from: $0)
        }
    }
    /**
     Create a vector store.
     - POST /vector_stores
     - parameter createVectorStoreRequest: (body)  
     - returns: RequestBuilder<VectorStoreObject> 
     */


    /**
     Create a vector store file by attaching a [File](/docs/api-reference/files) to a [vector store](/docs/api-reference/vector-stores/object).
     
     - parameter vectorStoreId: (path) The ID of the vector store for which to create a File.  
     - parameter createVectorStoreFileRequest: (body)  
     - returns: VectorStoreFileObject
     */

    open func createVectorStoreFile(vectorStoreId: String, createVectorStoreFileRequest: CreateVectorStoreFileRequest) async throws -> VectorStoreFileObject {
        var localVariablePath = "/vector_stores/{vector_store_id}/files"
        let vectorStoreIdPreEscape = "\(APIHelper.mapValueToPathItem(vectorStoreId))"
        let vectorStoreIdPostEscape = vectorStoreIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{vector_store_id}", with: vectorStoreIdPostEscape, options: .literal, range: nil)
        
        let urlRequest = try makeRequest(
            uriPath: localVariablePath,
            httpMethod: "POST",
            request: createVectorStoreFileRequest
        )
        return try await send(request: urlRequest) {
            try self.jsonDecoder.decode(VectorStoreFileObject.self, from: $0)
        }
    }
    /**
     Create a vector store file by attaching a [File](/docs/api-reference/files) to a [vector store](/docs/api-reference/vector-stores/object).
     - POST /vector_stores/{vector_store_id}/files
     - parameter vectorStoreId: (path) The ID of the vector store for which to create a File.  
     - parameter createVectorStoreFileRequest: (body)  
     - returns: RequestBuilder<VectorStoreFileObject> 
     */


    /**
     Create a vector store file batch.
     
     - parameter vectorStoreId: (path) The ID of the vector store for which to create a File Batch.  
     - parameter createVectorStoreFileBatchRequest: (body)  
     - returns: VectorStoreFileBatchObject
     */

    open func createVectorStoreFileBatch(vectorStoreId: String, createVectorStoreFileBatchRequest: CreateVectorStoreFileBatchRequest) async throws -> VectorStoreFileBatchObject {
        var localVariablePath = "/vector_stores/{vector_store_id}/file_batches"
        let vectorStoreIdPreEscape = "\(APIHelper.mapValueToPathItem(vectorStoreId))"
        let vectorStoreIdPostEscape = vectorStoreIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{vector_store_id}", with: vectorStoreIdPostEscape, options: .literal, range: nil)
        
        let urlRequest = try makeRequest(
            uriPath: localVariablePath,
            httpMethod: "POST",
            request: createVectorStoreFileBatchRequest
        )
        return try await send(request: urlRequest) {
            try self.jsonDecoder.decode(VectorStoreFileBatchObject.self, from: $0)
        }
    }
    /**
     Create a vector store file batch.
     - POST /vector_stores/{vector_store_id}/file_batches
     - parameter vectorStoreId: (path) The ID of the vector store for which to create a File Batch.  
     - parameter createVectorStoreFileBatchRequest: (body)  
     - returns: RequestBuilder<VectorStoreFileBatchObject> 
     */


    /**
     Delete a vector store.
     
     - parameter vectorStoreId: (path) The ID of the vector store to delete. 
     - returns: DeleteVectorStoreResponse
     */

    open func deleteVectorStore(vectorStoreId: String) async throws -> DeleteVectorStoreResponse {
        var localVariablePath = "/vector_stores/{vector_store_id}"
        let vectorStoreIdPreEscape = "\(APIHelper.mapValueToPathItem(vectorStoreId))"
        let vectorStoreIdPostEscape = vectorStoreIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{vector_store_id}", with: vectorStoreIdPostEscape, options: .literal, range: nil)
        
        let urlRequest = try makeRequest(
            uriPath: localVariablePath,
            httpMethod: "DELETE"
        )
        return try await send(request: urlRequest) {
            try self.jsonDecoder.decode(DeleteVectorStoreResponse.self, from: $0)
        }
    }
    /**
     Delete a vector store.
     - DELETE /vector_stores/{vector_store_id}
     - parameter vectorStoreId: (path) The ID of the vector store to delete. 
     - returns: RequestBuilder<DeleteVectorStoreResponse> 
     */


    /**
     Delete a vector store file. This will remove the file from the vector store but the file itself will not be deleted. To delete the file, use the [delete file](/docs/api-reference/files/delete) endpoint.
     
     - parameter vectorStoreId: (path) The ID of the vector store that the file belongs to. 
     - parameter fileId: (path) The ID of the file to delete. 
     - returns: DeleteVectorStoreFileResponse
     */

    open func deleteVectorStoreFile(vectorStoreId: String, fileId: String) async throws -> DeleteVectorStoreFileResponse {
        var localVariablePath = "/vector_stores/{vector_store_id}/files/{file_id}"
        let vectorStoreIdPreEscape = "\(APIHelper.mapValueToPathItem(vectorStoreId))"
        let vectorStoreIdPostEscape = vectorStoreIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{vector_store_id}", with: vectorStoreIdPostEscape, options: .literal, range: nil)
        let fileIdPreEscape = "\(APIHelper.mapValueToPathItem(fileId))"
        let fileIdPostEscape = fileIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{file_id}", with: fileIdPostEscape, options: .literal, range: nil)
        
        let urlRequest = try makeRequest(
            uriPath: localVariablePath,
            httpMethod: "DELETE"
        )
        return try await send(request: urlRequest) {
            try self.jsonDecoder.decode(DeleteVectorStoreFileResponse.self, from: $0)
        }
    }
    /**
     Delete a vector store file. This will remove the file from the vector store but the file itself will not be deleted. To delete the file, use the [delete file](/docs/api-reference/files/delete) endpoint.
     - DELETE /vector_stores/{vector_store_id}/files/{file_id}
     - parameter vectorStoreId: (path) The ID of the vector store that the file belongs to. 
     - parameter fileId: (path) The ID of the file to delete. 
     - returns: RequestBuilder<DeleteVectorStoreFileResponse> 
     */


    /**
     Retrieves a vector store.
     
     - parameter vectorStoreId: (path) The ID of the vector store to retrieve. 
     - returns: VectorStoreObject
     */

    open func getVectorStore(vectorStoreId: String) async throws -> VectorStoreObject {
        var localVariablePath = "/vector_stores/{vector_store_id}"
        let vectorStoreIdPreEscape = "\(APIHelper.mapValueToPathItem(vectorStoreId))"
        let vectorStoreIdPostEscape = vectorStoreIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{vector_store_id}", with: vectorStoreIdPostEscape, options: .literal, range: nil)
        
        let urlRequest = try makeRequest(
            uriPath: localVariablePath,
            httpMethod: "GET"
        )
        return try await send(request: urlRequest) {
            try self.jsonDecoder.decode(VectorStoreObject.self, from: $0)
        }
    }
    /**
     Retrieves a vector store.
     - GET /vector_stores/{vector_store_id}
     - parameter vectorStoreId: (path) The ID of the vector store to retrieve. 
     - returns: RequestBuilder<VectorStoreObject> 
     */


    /**
     Retrieves a vector store file.
     
     - parameter vectorStoreId: (path) The ID of the vector store that the file belongs to. 
     - parameter fileId: (path) The ID of the file being retrieved. 
     - returns: VectorStoreFileObject
     */

    open func getVectorStoreFile(vectorStoreId: String, fileId: String) async throws -> VectorStoreFileObject {
        var localVariablePath = "/vector_stores/{vector_store_id}/files/{file_id}"
        let vectorStoreIdPreEscape = "\(APIHelper.mapValueToPathItem(vectorStoreId))"
        let vectorStoreIdPostEscape = vectorStoreIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{vector_store_id}", with: vectorStoreIdPostEscape, options: .literal, range: nil)
        let fileIdPreEscape = "\(APIHelper.mapValueToPathItem(fileId))"
        let fileIdPostEscape = fileIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{file_id}", with: fileIdPostEscape, options: .literal, range: nil)
        
        let urlRequest = try makeRequest(
            uriPath: localVariablePath,
            httpMethod: "GET"
        )
        return try await send(request: urlRequest) {
            try self.jsonDecoder.decode(VectorStoreFileObject.self, from: $0)
        }
    }
    /**
     Retrieves a vector store file.
     - GET /vector_stores/{vector_store_id}/files/{file_id}
     - parameter vectorStoreId: (path) The ID of the vector store that the file belongs to. 
     - parameter fileId: (path) The ID of the file being retrieved. 
     - returns: RequestBuilder<VectorStoreFileObject> 
     */


    /**
     Retrieves a vector store file batch.
     
     - parameter vectorStoreId: (path) The ID of the vector store that the file batch belongs to. 
     - parameter batchId: (path) The ID of the file batch being retrieved. 
     - returns: VectorStoreFileBatchObject
     */

    open func getVectorStoreFileBatch(vectorStoreId: String, batchId: String) async throws -> VectorStoreFileBatchObject {
        var localVariablePath = "/vector_stores/{vector_store_id}/file_batches/{batch_id}"
        let vectorStoreIdPreEscape = "\(APIHelper.mapValueToPathItem(vectorStoreId))"
        let vectorStoreIdPostEscape = vectorStoreIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{vector_store_id}", with: vectorStoreIdPostEscape, options: .literal, range: nil)
        let batchIdPreEscape = "\(APIHelper.mapValueToPathItem(batchId))"
        let batchIdPostEscape = batchIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{batch_id}", with: batchIdPostEscape, options: .literal, range: nil)
        
        let urlRequest = try makeRequest(
            uriPath: localVariablePath,
            httpMethod: "GET"
        )
        return try await send(request: urlRequest) {
            try self.jsonDecoder.decode(VectorStoreFileBatchObject.self, from: $0)
        }
    }
    /**
     Retrieves a vector store file batch.
     - GET /vector_stores/{vector_store_id}/file_batches/{batch_id}
     - parameter vectorStoreId: (path) The ID of the vector store that the file batch belongs to. 
     - parameter batchId: (path) The ID of the file batch being retrieved. 
     - returns: RequestBuilder<VectorStoreFileBatchObject> 
     */


    /**
     * enum for parameter order
     */
    public enum Order_listFilesInVectorStoreBatch: String, CaseIterable {
        case asc = "asc"
        case desc = "desc"
    }

    /**
     * enum for parameter filter
     */
    public enum Filter_listFilesInVectorStoreBatch: String, CaseIterable {
        case inProgress = "in_progress"
        case completed = "completed"
        case failed = "failed"
        case cancelled = "cancelled"
    }

    /**
     Returns a list of vector store files in a batch.
     
     - parameter vectorStoreId: (path) The ID of the vector store that the files belong to. 
     - parameter batchId: (path) The ID of the file batch that the files belong to. 
     - parameter limit: (query) A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20.  (optional, default to 20)
     - parameter order: (query) Sort order by the &#x60;created_at&#x60; timestamp of the objects. &#x60;asc&#x60; for ascending order and &#x60;desc&#x60; for descending order.  (optional, default to .desc)
     - parameter after: (query) A cursor for use in pagination. &#x60;after&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after&#x3D;obj_foo in order to fetch the next page of the list.  (optional)
     - parameter before: (query) A cursor for use in pagination. &#x60;before&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include before&#x3D;obj_foo in order to fetch the previous page of the list.  (optional)
     - parameter filter: (query) Filter by file status. One of &#x60;in_progress&#x60;, &#x60;completed&#x60;, &#x60;failed&#x60;, &#x60;cancelled&#x60;. (optional)
     - returns: ListVectorStoreFilesResponse
     */

    open func listFilesInVectorStoreBatch(vectorStoreId: String, batchId: String, limit: Int? = nil, order: Order_listFilesInVectorStoreBatch? = nil, after: String? = nil, before: String? = nil, filter: Filter_listFilesInVectorStoreBatch? = nil) async throws -> ListVectorStoreFilesResponse {
        var localVariablePath = "/vector_stores/{vector_store_id}/file_batches/{batch_id}/files"
        let vectorStoreIdPreEscape = "\(APIHelper.mapValueToPathItem(vectorStoreId))"
        let vectorStoreIdPostEscape = vectorStoreIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{vector_store_id}", with: vectorStoreIdPostEscape, options: .literal, range: nil)
        let batchIdPreEscape = "\(APIHelper.mapValueToPathItem(batchId))"
        let batchIdPostEscape = batchIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{batch_id}", with: batchIdPostEscape, options: .literal, range: nil)
        let queryParams = APIHelper.mapValuesToQueryItems([
            "limit": (wrappedValue: limit?.encodeToJSON(), isExplode: true),
            "order": (wrappedValue: order?.encodeToJSON(), isExplode: true),
            "after": (wrappedValue: after?.encodeToJSON(), isExplode: true),
            "before": (wrappedValue: before?.encodeToJSON(), isExplode: true),
            "filter": (wrappedValue: filter?.encodeToJSON(), isExplode: true),
        ])
        let urlRequest = try makeRequest(
            uriPath: localVariablePath,
            queryParams: queryParams ?? [],
            httpMethod: "GET"
        )
        return try await send(request: urlRequest) {
            try self.jsonDecoder.decode(ListVectorStoreFilesResponse.self, from: $0)
        }
    }
    /**
     Returns a list of vector store files in a batch.
     - GET /vector_stores/{vector_store_id}/file_batches/{batch_id}/files
     - parameter vectorStoreId: (path) The ID of the vector store that the files belong to. 
     - parameter batchId: (path) The ID of the file batch that the files belong to. 
     - parameter limit: (query) A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20.  (optional, default to 20)
     - parameter order: (query) Sort order by the &#x60;created_at&#x60; timestamp of the objects. &#x60;asc&#x60; for ascending order and &#x60;desc&#x60; for descending order.  (optional, default to .desc)
     - parameter after: (query) A cursor for use in pagination. &#x60;after&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after&#x3D;obj_foo in order to fetch the next page of the list.  (optional)
     - parameter before: (query) A cursor for use in pagination. &#x60;before&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include before&#x3D;obj_foo in order to fetch the previous page of the list.  (optional)
     - parameter filter: (query) Filter by file status. One of &#x60;in_progress&#x60;, &#x60;completed&#x60;, &#x60;failed&#x60;, &#x60;cancelled&#x60;. (optional)
     - returns: RequestBuilder<ListVectorStoreFilesResponse> 
     */


    /**
     * enum for parameter order
     */
    public enum Order_listVectorStoreFiles: String, CaseIterable {
        case asc = "asc"
        case desc = "desc"
    }

    /**
     * enum for parameter filter
     */
    public enum Filter_listVectorStoreFiles: String, CaseIterable {
        case inProgress = "in_progress"
        case completed = "completed"
        case failed = "failed"
        case cancelled = "cancelled"
    }

    /**
     Returns a list of vector store files.
     
     - parameter vectorStoreId: (path) The ID of the vector store that the files belong to. 
     - parameter limit: (query) A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20.  (optional, default to 20)
     - parameter order: (query) Sort order by the &#x60;created_at&#x60; timestamp of the objects. &#x60;asc&#x60; for ascending order and &#x60;desc&#x60; for descending order.  (optional, default to .desc)
     - parameter after: (query) A cursor for use in pagination. &#x60;after&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after&#x3D;obj_foo in order to fetch the next page of the list.  (optional)
     - parameter before: (query) A cursor for use in pagination. &#x60;before&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include before&#x3D;obj_foo in order to fetch the previous page of the list.  (optional)
     - parameter filter: (query) Filter by file status. One of &#x60;in_progress&#x60;, &#x60;completed&#x60;, &#x60;failed&#x60;, &#x60;cancelled&#x60;. (optional)
     - returns: ListVectorStoreFilesResponse
     */

    open func listVectorStoreFiles(vectorStoreId: String, limit: Int? = nil, order: Order_listVectorStoreFiles? = nil, after: String? = nil, before: String? = nil, filter: Filter_listVectorStoreFiles? = nil) async throws -> ListVectorStoreFilesResponse {
        var localVariablePath = "/vector_stores/{vector_store_id}/files"
        let vectorStoreIdPreEscape = "\(APIHelper.mapValueToPathItem(vectorStoreId))"
        let vectorStoreIdPostEscape = vectorStoreIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{vector_store_id}", with: vectorStoreIdPostEscape, options: .literal, range: nil)
        let queryParams = APIHelper.mapValuesToQueryItems([
            "limit": (wrappedValue: limit?.encodeToJSON(), isExplode: true),
            "order": (wrappedValue: order?.encodeToJSON(), isExplode: true),
            "after": (wrappedValue: after?.encodeToJSON(), isExplode: true),
            "before": (wrappedValue: before?.encodeToJSON(), isExplode: true),
            "filter": (wrappedValue: filter?.encodeToJSON(), isExplode: true),
        ])
        let urlRequest = try makeRequest(
            uriPath: localVariablePath,
            queryParams: queryParams ?? [],
            httpMethod: "GET"
        )
        return try await send(request: urlRequest) {
            try self.jsonDecoder.decode(ListVectorStoreFilesResponse.self, from: $0)
        }
    }
    /**
     Returns a list of vector store files.
     - GET /vector_stores/{vector_store_id}/files
     - parameter vectorStoreId: (path) The ID of the vector store that the files belong to. 
     - parameter limit: (query) A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20.  (optional, default to 20)
     - parameter order: (query) Sort order by the &#x60;created_at&#x60; timestamp of the objects. &#x60;asc&#x60; for ascending order and &#x60;desc&#x60; for descending order.  (optional, default to .desc)
     - parameter after: (query) A cursor for use in pagination. &#x60;after&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after&#x3D;obj_foo in order to fetch the next page of the list.  (optional)
     - parameter before: (query) A cursor for use in pagination. &#x60;before&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include before&#x3D;obj_foo in order to fetch the previous page of the list.  (optional)
     - parameter filter: (query) Filter by file status. One of &#x60;in_progress&#x60;, &#x60;completed&#x60;, &#x60;failed&#x60;, &#x60;cancelled&#x60;. (optional)
     - returns: RequestBuilder<ListVectorStoreFilesResponse> 
     */


    /**
     * enum for parameter order
     */
    public enum Order_listVectorStores: String, CaseIterable {
        case asc = "asc"
        case desc = "desc"
    }

    /**
     Returns a list of vector stores.
     
     - parameter limit: (query) A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20.  (optional, default to 20)
     - parameter order: (query) Sort order by the &#x60;created_at&#x60; timestamp of the objects. &#x60;asc&#x60; for ascending order and &#x60;desc&#x60; for descending order.  (optional, default to .desc)
     - parameter after: (query) A cursor for use in pagination. &#x60;after&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after&#x3D;obj_foo in order to fetch the next page of the list.  (optional)
     - parameter before: (query) A cursor for use in pagination. &#x60;before&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include before&#x3D;obj_foo in order to fetch the previous page of the list.  (optional)
     - returns: ListVectorStoresResponse
     */

    open func listVectorStores(limit: Int? = nil, order: Order_listVectorStores? = nil, after: String? = nil, before: String? = nil) async throws -> ListVectorStoresResponse {
        let localVariablePath = "/vector_stores"
        let queryParams = APIHelper.mapValuesToQueryItems([
            "limit": (wrappedValue: limit?.encodeToJSON(), isExplode: true),
            "order": (wrappedValue: order?.encodeToJSON(), isExplode: true),
            "after": (wrappedValue: after?.encodeToJSON(), isExplode: true),
            "before": (wrappedValue: before?.encodeToJSON(), isExplode: true),
        ])
        let urlRequest = try makeRequest(
            uriPath: localVariablePath,
            queryParams: queryParams ?? [],
            httpMethod: "GET"
        )
        return try await send(request: urlRequest) {
            try self.jsonDecoder.decode(ListVectorStoresResponse.self, from: $0)
        }
    }
    /**
     Returns a list of vector stores.
     - GET /vector_stores
     - parameter limit: (query) A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20.  (optional, default to 20)
     - parameter order: (query) Sort order by the &#x60;created_at&#x60; timestamp of the objects. &#x60;asc&#x60; for ascending order and &#x60;desc&#x60; for descending order.  (optional, default to .desc)
     - parameter after: (query) A cursor for use in pagination. &#x60;after&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after&#x3D;obj_foo in order to fetch the next page of the list.  (optional)
     - parameter before: (query) A cursor for use in pagination. &#x60;before&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include before&#x3D;obj_foo in order to fetch the previous page of the list.  (optional)
     - returns: RequestBuilder<ListVectorStoresResponse> 
     */


    /**
     Modifies a vector store.
     
     - parameter vectorStoreId: (path) The ID of the vector store to modify. 
     - parameter updateVectorStoreRequest: (body)  
     - returns: VectorStoreObject
     */

    open func modifyVectorStore(vectorStoreId: String, updateVectorStoreRequest: UpdateVectorStoreRequest) async throws -> VectorStoreObject {
        var localVariablePath = "/vector_stores/{vector_store_id}"
        let vectorStoreIdPreEscape = "\(APIHelper.mapValueToPathItem(vectorStoreId))"
        let vectorStoreIdPostEscape = vectorStoreIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{vector_store_id}", with: vectorStoreIdPostEscape, options: .literal, range: nil)
        
        let urlRequest = try makeRequest(
            uriPath: localVariablePath,
            httpMethod: "POST",
            request: updateVectorStoreRequest
        )
        return try await send(request: urlRequest) {
            try self.jsonDecoder.decode(VectorStoreObject.self, from: $0)
        }
    }
    /**
     Modifies a vector store.
     - POST /vector_stores/{vector_store_id}
     - parameter vectorStoreId: (path) The ID of the vector store to modify. 
     - parameter updateVectorStoreRequest: (body)  
     - returns: RequestBuilder<VectorStoreObject> 
     */

}

protocol VectorStoresAPIEndpoints {


        func cancelVectorStoreFileBatch(vectorStoreId: String, batchId: String) async throws -> VectorStoreFileBatchObject


        func createVectorStore(createVectorStoreRequest: CreateVectorStoreRequest) async throws -> VectorStoreObject


        func createVectorStoreFile(vectorStoreId: String, createVectorStoreFileRequest: CreateVectorStoreFileRequest) async throws -> VectorStoreFileObject


        func createVectorStoreFileBatch(vectorStoreId: String, createVectorStoreFileBatchRequest: CreateVectorStoreFileBatchRequest) async throws -> VectorStoreFileBatchObject


        func deleteVectorStore(vectorStoreId: String) async throws -> DeleteVectorStoreResponse


        func deleteVectorStoreFile(vectorStoreId: String, fileId: String) async throws -> DeleteVectorStoreFileResponse


        func getVectorStore(vectorStoreId: String) async throws -> VectorStoreObject


        func getVectorStoreFile(vectorStoreId: String, fileId: String) async throws -> VectorStoreFileObject


        func getVectorStoreFileBatch(vectorStoreId: String, batchId: String) async throws -> VectorStoreFileBatchObject


        func listFilesInVectorStoreBatch(vectorStoreId: String, batchId: String, limit: Int?, order: Order_listFilesInVectorStoreBatch?, after: String?, before: String?, filter: Filter_listFilesInVectorStoreBatch?) async throws -> ListVectorStoreFilesResponse


        func listVectorStoreFiles(vectorStoreId: String, limit: Int?, order: Order_listVectorStoreFiles?, after: String?, before: String?, filter: Filter_listVectorStoreFiles?) async throws -> ListVectorStoreFilesResponse


        func listVectorStores(limit: Int?, order: Order_listVectorStores?, after: String?, before: String?) async throws -> ListVectorStoresResponse


        func modifyVectorStore(vectorStoreId: String, updateVectorStoreRequest: UpdateVectorStoreRequest) async throws -> VectorStoreObject


}

