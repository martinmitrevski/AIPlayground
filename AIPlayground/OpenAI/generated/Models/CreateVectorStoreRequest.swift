//
// CreateVectorStoreRequest.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation


public struct CreateVectorStoreRequest: Codable, JSONEncodable, Hashable {
    /** A list of [File](/docs/api-reference/files) IDs that the vector store should use. Useful for tools like `file_search` that can access files. */
    public var fileIds: [String]?
    /** The name of the vector store. */
    public var name: String?
    public var expiresAfter: VectorStoreExpirationAfter?
    public var chunkingStrategy: CreateVectorStoreRequestChunkingStrategy?
    /** Set of 16 key-value pairs that can be attached to an object. This can be useful for storing additional information about the object in a structured format. Keys can be a maximum of 64 characters long and values can be a maximum of 512 characters long.  */
    public var metadata: [String: RawJSON]?

    public init(fileIds: [String]? = nil, name: String? = nil, expiresAfter: VectorStoreExpirationAfter? = nil, chunkingStrategy: CreateVectorStoreRequestChunkingStrategy? = nil, metadata: [String: RawJSON]? = nil) {
        self.fileIds = fileIds
        self.name = name
        self.expiresAfter = expiresAfter
        self.chunkingStrategy = chunkingStrategy
        self.metadata = metadata
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case fileIds = "file_ids"
        case name
        case expiresAfter = "expires_after"
        case chunkingStrategy = "chunking_strategy"
        case metadata
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(fileIds, forKey: .fileIds)
        try container.encodeIfPresent(name, forKey: .name)
        try container.encodeIfPresent(expiresAfter, forKey: .expiresAfter)
        try container.encodeIfPresent(chunkingStrategy, forKey: .chunkingStrategy)
        try container.encodeIfPresent(metadata, forKey: .metadata)
    }
}

