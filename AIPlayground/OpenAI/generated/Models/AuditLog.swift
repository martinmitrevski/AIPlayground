//
// AuditLog.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
/** A log of a user action or configuration change within this organization. */

public struct AuditLog: Codable, JSONEncodable, Hashable {
    /** The ID of this log. */
    public var id: String
    public var type: AuditLogEventType
    /** The Unix timestamp (in seconds) of the event. */
    public var effectiveAt: Int
    public var project: AuditLogProject?
    public var actor: AuditLogActor
    public var apiKeyCreated: AuditLogApiKeyCreated?
    public var apiKeyUpdated: AuditLogApiKeyUpdated?
    public var apiKeyDeleted: AuditLogApiKeyDeleted?
    public var inviteSent: AuditLogInviteSent?
    public var inviteAccepted: AuditLogInviteAccepted?
    public var inviteDeleted: AuditLogInviteAccepted?
    public var loginFailed: AuditLogLoginFailed?
    public var logoutFailed: AuditLogLoginFailed?
    public var organizationUpdated: AuditLogOrganizationUpdated?
    public var projectCreated: AuditLogProjectCreated?
    public var projectUpdated: AuditLogProjectUpdated?
    public var projectArchived: AuditLogProjectArchived?
    public var serviceAccountCreated: AuditLogServiceAccountCreated?
    public var serviceAccountUpdated: AuditLogServiceAccountUpdated?
    public var serviceAccountDeleted: AuditLogServiceAccountDeleted?
    public var userAdded: AuditLogUserAdded?
    public var userUpdated: AuditLogUserUpdated?
    public var userDeleted: AuditLogUserDeleted?

    public init(id: String, type: AuditLogEventType, effectiveAt: Int, project: AuditLogProject? = nil, actor: AuditLogActor, apiKeyCreated: AuditLogApiKeyCreated? = nil, apiKeyUpdated: AuditLogApiKeyUpdated? = nil, apiKeyDeleted: AuditLogApiKeyDeleted? = nil, inviteSent: AuditLogInviteSent? = nil, inviteAccepted: AuditLogInviteAccepted? = nil, inviteDeleted: AuditLogInviteAccepted? = nil, loginFailed: AuditLogLoginFailed? = nil, logoutFailed: AuditLogLoginFailed? = nil, organizationUpdated: AuditLogOrganizationUpdated? = nil, projectCreated: AuditLogProjectCreated? = nil, projectUpdated: AuditLogProjectUpdated? = nil, projectArchived: AuditLogProjectArchived? = nil, serviceAccountCreated: AuditLogServiceAccountCreated? = nil, serviceAccountUpdated: AuditLogServiceAccountUpdated? = nil, serviceAccountDeleted: AuditLogServiceAccountDeleted? = nil, userAdded: AuditLogUserAdded? = nil, userUpdated: AuditLogUserUpdated? = nil, userDeleted: AuditLogUserDeleted? = nil) {
        self.id = id
        self.type = type
        self.effectiveAt = effectiveAt
        self.project = project
        self.actor = actor
        self.apiKeyCreated = apiKeyCreated
        self.apiKeyUpdated = apiKeyUpdated
        self.apiKeyDeleted = apiKeyDeleted
        self.inviteSent = inviteSent
        self.inviteAccepted = inviteAccepted
        self.inviteDeleted = inviteDeleted
        self.loginFailed = loginFailed
        self.logoutFailed = logoutFailed
        self.organizationUpdated = organizationUpdated
        self.projectCreated = projectCreated
        self.projectUpdated = projectUpdated
        self.projectArchived = projectArchived
        self.serviceAccountCreated = serviceAccountCreated
        self.serviceAccountUpdated = serviceAccountUpdated
        self.serviceAccountDeleted = serviceAccountDeleted
        self.userAdded = userAdded
        self.userUpdated = userUpdated
        self.userDeleted = userDeleted
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case id
        case type
        case effectiveAt = "effective_at"
        case project
        case actor
        case apiKeyCreated = "api_key.created"
        case apiKeyUpdated = "api_key.updated"
        case apiKeyDeleted = "api_key.deleted"
        case inviteSent = "invite.sent"
        case inviteAccepted = "invite.accepted"
        case inviteDeleted = "invite.deleted"
        case loginFailed = "login.failed"
        case logoutFailed = "logout.failed"
        case organizationUpdated = "organization.updated"
        case projectCreated = "project.created"
        case projectUpdated = "project.updated"
        case projectArchived = "project.archived"
        case serviceAccountCreated = "service_account.created"
        case serviceAccountUpdated = "service_account.updated"
        case serviceAccountDeleted = "service_account.deleted"
        case userAdded = "user.added"
        case userUpdated = "user.updated"
        case userDeleted = "user.deleted"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(id, forKey: .id)
        try container.encode(type, forKey: .type)
        try container.encode(effectiveAt, forKey: .effectiveAt)
        try container.encodeIfPresent(project, forKey: .project)
        try container.encode(actor, forKey: .actor)
        try container.encodeIfPresent(apiKeyCreated, forKey: .apiKeyCreated)
        try container.encodeIfPresent(apiKeyUpdated, forKey: .apiKeyUpdated)
        try container.encodeIfPresent(apiKeyDeleted, forKey: .apiKeyDeleted)
        try container.encodeIfPresent(inviteSent, forKey: .inviteSent)
        try container.encodeIfPresent(inviteAccepted, forKey: .inviteAccepted)
        try container.encodeIfPresent(inviteDeleted, forKey: .inviteDeleted)
        try container.encodeIfPresent(loginFailed, forKey: .loginFailed)
        try container.encodeIfPresent(logoutFailed, forKey: .logoutFailed)
        try container.encodeIfPresent(organizationUpdated, forKey: .organizationUpdated)
        try container.encodeIfPresent(projectCreated, forKey: .projectCreated)
        try container.encodeIfPresent(projectUpdated, forKey: .projectUpdated)
        try container.encodeIfPresent(projectArchived, forKey: .projectArchived)
        try container.encodeIfPresent(serviceAccountCreated, forKey: .serviceAccountCreated)
        try container.encodeIfPresent(serviceAccountUpdated, forKey: .serviceAccountUpdated)
        try container.encodeIfPresent(serviceAccountDeleted, forKey: .serviceAccountDeleted)
        try container.encodeIfPresent(userAdded, forKey: .userAdded)
        try container.encodeIfPresent(userUpdated, forKey: .userUpdated)
        try container.encodeIfPresent(userDeleted, forKey: .userDeleted)
    }
}

