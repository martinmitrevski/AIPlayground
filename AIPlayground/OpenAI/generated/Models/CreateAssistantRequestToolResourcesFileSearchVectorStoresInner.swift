//
// CreateAssistantRequestToolResourcesFileSearchVectorStoresInner.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation


public struct CreateAssistantRequestToolResourcesFileSearchVectorStoresInner: Codable, JSONEncodable, Hashable {
    /** A list of [file](/docs/api-reference/files) IDs to add to the vector store. There can be a maximum of 10000 files in a vector store.  */
    public var fileIds: [String]?
    public var chunkingStrategy: CreateAssistantRequestToolResourcesFileSearchVectorStoresInnerChunkingStrategy?
    /** Set of 16 key-value pairs that can be attached to a vector store. This can be useful for storing additional information about the vector store in a structured format. Keys can be a maximum of 64 characters long and values can be a maximum of 512 characters long.  */
    public var metadata: [String: RawJSON]?

    public init(fileIds: [String]? = nil, chunkingStrategy: CreateAssistantRequestToolResourcesFileSearchVectorStoresInnerChunkingStrategy? = nil, metadata: [String: RawJSON]? = nil) {
        self.fileIds = fileIds
        self.chunkingStrategy = chunkingStrategy
        self.metadata = metadata
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case fileIds = "file_ids"
        case chunkingStrategy = "chunking_strategy"
        case metadata
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(fileIds, forKey: .fileIds)
        try container.encodeIfPresent(chunkingStrategy, forKey: .chunkingStrategy)
        try container.encodeIfPresent(metadata, forKey: .metadata)
    }
}

