//
// CreateBatchRequest.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation


public struct CreateBatchRequest: Codable, JSONEncodable, Hashable {
    public enum Endpoint: String, Codable, CaseIterable {
        case chatSlashCompletions = "/v1/chat/completions"
        case embeddings = "/v1/embeddings"
        case completions = "/v1/completions"
    }
    public enum CompletionWindow: String, Codable, CaseIterable {
        case _24h = "24h"
    }
    /** The ID of an uploaded file that contains requests for the new batch.  See [upload file](/docs/api-reference/files/create) for how to upload a file.  Your input file must be formatted as a [JSONL file](/docs/api-reference/batch/request-input), and must be uploaded with the purpose `batch`. The file can contain up to 50,000 requests, and can be up to 100 MB in size.  */
    public var inputFileId: String
    /** The endpoint to be used for all requests in the batch. Currently `/v1/chat/completions`, `/v1/embeddings`, and `/v1/completions` are supported. Note that `/v1/embeddings` batches are also restricted to a maximum of 50,000 embedding inputs across all requests in the batch. */
    public var endpoint: Endpoint
    /** The time frame within which the batch should be processed. Currently only `24h` is supported. */
    public var completionWindow: CompletionWindow
    /** Optional custom metadata for the batch. */
    public var metadata: [String: String]?

    public init(inputFileId: String, endpoint: Endpoint, completionWindow: CompletionWindow, metadata: [String: String]? = nil) {
        self.inputFileId = inputFileId
        self.endpoint = endpoint
        self.completionWindow = completionWindow
        self.metadata = metadata
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case inputFileId = "input_file_id"
        case endpoint
        case completionWindow = "completion_window"
        case metadata
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(inputFileId, forKey: .inputFileId)
        try container.encode(endpoint, forKey: .endpoint)
        try container.encode(completionWindow, forKey: .completionWindow)
        try container.encodeIfPresent(metadata, forKey: .metadata)
    }
}

