//
// CreateModerationResponseResultsInnerCategoryAppliedInputTypes.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
/** A list of the categories along with the input type(s) that the score applies to. */

public struct CreateModerationResponseResultsInnerCategoryAppliedInputTypes: Codable, JSONEncodable, Hashable {
    public enum Hate: String, Codable, CaseIterable {
        case text = "text"
    }
    public enum HateThreatening: String, Codable, CaseIterable {
        case text = "text"
    }
    public enum Harassment: String, Codable, CaseIterable {
        case text = "text"
    }
    public enum HarassmentThreatening: String, Codable, CaseIterable {
        case text = "text"
    }
    public enum Illicit: String, Codable, CaseIterable {
        case text = "text"
    }
    public enum IllicitViolent: String, Codable, CaseIterable {
        case text = "text"
    }
    public enum SelfHarm: String, Codable, CaseIterable {
        case text = "text"
        case image = "image"
    }
    public enum SelfHarmIntent: String, Codable, CaseIterable {
        case text = "text"
        case image = "image"
    }
    public enum SelfHarmInstructions: String, Codable, CaseIterable {
        case text = "text"
        case image = "image"
    }
    public enum Sexual: String, Codable, CaseIterable {
        case text = "text"
        case image = "image"
    }
    public enum SexualMinors: String, Codable, CaseIterable {
        case text = "text"
    }
    public enum Violence: String, Codable, CaseIterable {
        case text = "text"
        case image = "image"
    }
    public enum ViolenceGraphic: String, Codable, CaseIterable {
        case text = "text"
        case image = "image"
    }
    /** The applied input type(s) for the category 'hate'. */
    public var hate: [Hate]
    /** The applied input type(s) for the category 'hate/threatening'. */
    public var hateThreatening: [HateThreatening]
    /** The applied input type(s) for the category 'harassment'. */
    public var harassment: [Harassment]
    /** The applied input type(s) for the category 'harassment/threatening'. */
    public var harassmentThreatening: [HarassmentThreatening]
    /** The applied input type(s) for the category 'illicit'. */
    public var illicit: [Illicit]
    /** The applied input type(s) for the category 'illicit/violent'. */
    public var illicitViolent: [IllicitViolent]
    /** The applied input type(s) for the category 'self-harm'. */
    public var selfHarm: [SelfHarm]
    /** The applied input type(s) for the category 'self-harm/intent'. */
    public var selfHarmIntent: [SelfHarmIntent]
    /** The applied input type(s) for the category 'self-harm/instructions'. */
    public var selfHarmInstructions: [SelfHarmInstructions]
    /** The applied input type(s) for the category 'sexual'. */
    public var sexual: [Sexual]
    /** The applied input type(s) for the category 'sexual/minors'. */
    public var sexualMinors: [SexualMinors]
    /** The applied input type(s) for the category 'violence'. */
    public var violence: [Violence]
    /** The applied input type(s) for the category 'violence/graphic'. */
    public var violenceGraphic: [ViolenceGraphic]

    public init(hate: [Hate], hateThreatening: [HateThreatening], harassment: [Harassment], harassmentThreatening: [HarassmentThreatening], illicit: [Illicit], illicitViolent: [IllicitViolent], selfHarm: [SelfHarm], selfHarmIntent: [SelfHarmIntent], selfHarmInstructions: [SelfHarmInstructions], sexual: [Sexual], sexualMinors: [SexualMinors], violence: [Violence], violenceGraphic: [ViolenceGraphic]) {
        self.hate = hate
        self.hateThreatening = hateThreatening
        self.harassment = harassment
        self.harassmentThreatening = harassmentThreatening
        self.illicit = illicit
        self.illicitViolent = illicitViolent
        self.selfHarm = selfHarm
        self.selfHarmIntent = selfHarmIntent
        self.selfHarmInstructions = selfHarmInstructions
        self.sexual = sexual
        self.sexualMinors = sexualMinors
        self.violence = violence
        self.violenceGraphic = violenceGraphic
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case hate
        case hateThreatening = "hate/threatening"
        case harassment
        case harassmentThreatening = "harassment/threatening"
        case illicit
        case illicitViolent = "illicit/violent"
        case selfHarm = "self-harm"
        case selfHarmIntent = "self-harm/intent"
        case selfHarmInstructions = "self-harm/instructions"
        case sexual
        case sexualMinors = "sexual/minors"
        case violence
        case violenceGraphic = "violence/graphic"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(hate, forKey: .hate)
        try container.encode(hateThreatening, forKey: .hateThreatening)
        try container.encode(harassment, forKey: .harassment)
        try container.encode(harassmentThreatening, forKey: .harassmentThreatening)
        try container.encode(illicit, forKey: .illicit)
        try container.encode(illicitViolent, forKey: .illicitViolent)
        try container.encode(selfHarm, forKey: .selfHarm)
        try container.encode(selfHarmIntent, forKey: .selfHarmIntent)
        try container.encode(selfHarmInstructions, forKey: .selfHarmInstructions)
        try container.encode(sexual, forKey: .sexual)
        try container.encode(sexualMinors, forKey: .sexualMinors)
        try container.encode(violence, forKey: .violence)
        try container.encode(violenceGraphic, forKey: .violenceGraphic)
    }
}

