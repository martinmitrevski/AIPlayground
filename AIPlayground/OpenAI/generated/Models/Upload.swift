//
// Upload.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
/** The Upload object can accept byte chunks in the form of Parts.  */

public struct Upload: Codable, JSONEncodable, Hashable {
    public enum Status: String, Codable, CaseIterable {
        case pending = "pending"
        case completed = "completed"
        case cancelled = "cancelled"
        case expired = "expired"
    }
    public enum Object: String, Codable, CaseIterable {
        case upload = "upload"
    }
    /** The Upload unique identifier, which can be referenced in API endpoints. */
    public var id: String
    /** The Unix timestamp (in seconds) for when the Upload was created. */
    public var createdAt: Int
    /** The name of the file to be uploaded. */
    public var filename: String
    /** The intended number of bytes to be uploaded. */
    public var bytes: Int
    /** The intended purpose of the file. [Please refer here](/docs/api-reference/files/object#files/object-purpose) for acceptable values. */
    public var purpose: String
    /** The status of the Upload. */
    public var status: Status
    /** The Unix timestamp (in seconds) for when the Upload was created. */
    public var expiresAt: Int
    /** The object type, which is always \"upload\". */
    public var object: Object?
    public var file: OpenAIFile?

    public init(id: String, createdAt: Int, filename: String, bytes: Int, purpose: String, status: Status, expiresAt: Int, object: Object? = nil, file: OpenAIFile? = nil) {
        self.id = id
        self.createdAt = createdAt
        self.filename = filename
        self.bytes = bytes
        self.purpose = purpose
        self.status = status
        self.expiresAt = expiresAt
        self.object = object
        self.file = file
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case id
        case createdAt = "created_at"
        case filename
        case bytes
        case purpose
        case status
        case expiresAt = "expires_at"
        case object
        case file
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(id, forKey: .id)
        try container.encode(createdAt, forKey: .createdAt)
        try container.encode(filename, forKey: .filename)
        try container.encode(bytes, forKey: .bytes)
        try container.encode(purpose, forKey: .purpose)
        try container.encode(status, forKey: .status)
        try container.encode(expiresAt, forKey: .expiresAt)
        try container.encodeIfPresent(object, forKey: .object)
        try container.encodeIfPresent(file, forKey: .file)
    }
}

