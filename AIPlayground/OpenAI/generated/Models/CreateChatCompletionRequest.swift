//
// CreateChatCompletionRequest.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation


public struct CreateChatCompletionRequest: Codable, JSONEncodable, Hashable {
    public enum ServiceTier: String, Codable, CaseIterable {
        case auto = "auto"
        case _default = "default"
    }
    /** A list of messages comprising the conversation so far. [Example Python code](https://cookbook.openai.com/examples/how_to_format_inputs_to_chatgpt_models). */
    public var messages: [ChatCompletionRequestMessage]
    public var model: CreateChatCompletionRequestModel
    /** Number between -2.0 and 2.0. Positive values penalize new tokens based on their existing frequency in the text so far, decreasing the model's likelihood to repeat the same line verbatim.  [See more information about frequency and presence penalties.](/docs/guides/text-generation/parameter-details)  */
    public var frequencyPenalty: Double? = 0
    /** Modify the likelihood of specified tokens appearing in the completion.  Accepts a JSON object that maps tokens (specified by their token ID in the tokenizer) to an associated bias value from -100 to 100. Mathematically, the bias is added to the logits generated by the model prior to sampling. The exact effect will vary per model, but values between -1 and 1 should decrease or increase likelihood of selection; values like -100 or 100 should result in a ban or exclusive selection of the relevant token.  */
    public var logitBias: [String: Int]?
    /** Whether to return log probabilities of the output tokens or not. If true, returns the log probabilities of each output token returned in the `content` of `message`. */
    public var logprobs: Bool? = false
    /** An integer between 0 and 20 specifying the number of most likely tokens to return at each token position, each with an associated log probability. `logprobs` must be set to `true` if this parameter is used. */
    public var topLogprobs: Int?
    /** The maximum number of [tokens](/tokenizer) that can be generated in the chat completion. This value can be used to control [costs](https://openai.com/api/pricing/) for text generated via API.  This value is now deprecated in favor of `max_completion_tokens`, and is not compatible with [o1 series models](/docs/guides/reasoning).  */
    @available(*, deprecated, message: "This property is deprecated.")
    public var maxTokens: Int?
    /** An upper bound for the number of tokens that can be generated for a completion, including visible output tokens and [reasoning tokens](/docs/guides/reasoning).  */
    public var maxCompletionTokens: Int?
    /** How many chat completion choices to generate for each input message. Note that you will be charged based on the number of generated tokens across all of the choices. Keep `n` as `1` to minimize costs. */
    public var n: Int? = 1
    /** Number between -2.0 and 2.0. Positive values penalize new tokens based on whether they appear in the text so far, increasing the model's likelihood to talk about new topics.  [See more information about frequency and presence penalties.](/docs/guides/text-generation/parameter-details)  */
    public var presencePenalty: Double? = 0
    public var responseFormat: CreateChatCompletionRequestResponseFormat?
    /** This feature is in Beta. If specified, our system will make a best effort to sample deterministically, such that repeated requests with the same `seed` and parameters should return the same result. Determinism is not guaranteed, and you should refer to the `system_fingerprint` response parameter to monitor changes in the backend.  */
    public var seed: Int?
    /** Specifies the latency tier to use for processing the request. This parameter is relevant for customers subscribed to the scale tier service:   - If set to 'auto', and the Project is Scale tier enabled, the system will utilize scale tier credits until they are exhausted.    - If set to 'auto', and the Project is not Scale tier enabled, the request will be processed using the default service tier with a lower uptime SLA and no latency guarentee.   - If set to 'default', the request will be processed using the default service tier with a lower uptime SLA and no latency guarentee.   - When not set, the default behavior is 'auto'.    When this parameter is set, the response body will include the `service_tier` utilized.  */
    public var serviceTier: ServiceTier?
    public var stop: CreateChatCompletionRequestStop?
    /** If set, partial message deltas will be sent, like in ChatGPT. Tokens will be sent as data-only [server-sent events](https://developer.mozilla.org/en-US/docs/Web/API/Server-sent_events/Using_server-sent_events#Event_stream_format) as they become available, with the stream terminated by a `data: [DONE]` message. [Example Python code](https://cookbook.openai.com/examples/how_to_stream_completions).  */
    public var stream: Bool? = false
    public var streamOptions: ChatCompletionStreamOptions?
    /** What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic.  We generally recommend altering this or `top_p` but not both.  */
    public var temperature: Double? = 1
    /** An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass. So 0.1 means only the tokens comprising the top 10% probability mass are considered.  We generally recommend altering this or `temperature` but not both.  */
    public var topP: Double? = 1
    /** A list of tools the model may call. Currently, only functions are supported as a tool. Use this to provide a list of functions the model may generate JSON inputs for. A max of 128 functions are supported.  */
    public var tools: [ChatCompletionTool]?
    public var toolChoice: ChatCompletionToolChoiceOption?
    /** Whether to enable [parallel function calling](/docs/guides/function-calling/parallel-function-calling) during tool use. */
    public var parallelToolCalls: Bool? = true
    /** A unique identifier representing your end-user, which can help OpenAI to monitor and detect abuse. [Learn more](/docs/guides/safety-best-practices/end-user-ids).  */
    public var user: String?
    @available(*, deprecated, message: "This property is deprecated.")
    public var functionCall: CreateChatCompletionRequestFunctionCall?
    /** Deprecated in favor of `tools`.  A list of functions the model may generate JSON inputs for.  */
    @available(*, deprecated, message: "This property is deprecated.")
    public var functions: [ChatCompletionFunctions]?

    public init(messages: [ChatCompletionRequestMessage], model: CreateChatCompletionRequestModel, frequencyPenalty: Double? = 0, logitBias: [String: Int]? = nil, logprobs: Bool? = false, topLogprobs: Int? = nil, maxTokens: Int? = nil, maxCompletionTokens: Int? = nil, n: Int? = 1, presencePenalty: Double? = 0, responseFormat: CreateChatCompletionRequestResponseFormat? = nil, seed: Int? = nil, serviceTier: ServiceTier? = nil, stop: CreateChatCompletionRequestStop? = nil, stream: Bool? = false, streamOptions: ChatCompletionStreamOptions? = nil, temperature: Double? = 1, topP: Double? = 1, tools: [ChatCompletionTool]? = nil, toolChoice: ChatCompletionToolChoiceOption? = nil, parallelToolCalls: Bool? = true, user: String? = nil, functionCall: CreateChatCompletionRequestFunctionCall? = nil, functions: [ChatCompletionFunctions]? = nil) {
        self.messages = messages
        self.model = model
        self.frequencyPenalty = frequencyPenalty
        self.logitBias = logitBias
        self.logprobs = logprobs
        self.topLogprobs = topLogprobs
        self.maxTokens = maxTokens
        self.maxCompletionTokens = maxCompletionTokens
        self.n = n
        self.presencePenalty = presencePenalty
        self.responseFormat = responseFormat
        self.seed = seed
        self.serviceTier = serviceTier
        self.stop = stop
        self.stream = stream
        self.streamOptions = streamOptions
        self.temperature = temperature
        self.topP = topP
        self.tools = tools
        self.toolChoice = toolChoice
        self.parallelToolCalls = parallelToolCalls
        self.user = user
        self.functionCall = functionCall
        self.functions = functions
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case messages
        case model
        case frequencyPenalty = "frequency_penalty"
        case logitBias = "logit_bias"
        case logprobs
        case topLogprobs = "top_logprobs"
        case maxTokens = "max_tokens"
        case maxCompletionTokens = "max_completion_tokens"
        case n
        case presencePenalty = "presence_penalty"
        case responseFormat = "response_format"
        case seed
        case serviceTier = "service_tier"
        case stop
        case stream
        case streamOptions = "stream_options"
        case temperature
        case topP = "top_p"
        case tools
        case toolChoice = "tool_choice"
        case parallelToolCalls = "parallel_tool_calls"
        case user
        case functionCall = "function_call"
        case functions
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(messages, forKey: .messages)
        try container.encode(model, forKey: .model)
        try container.encodeIfPresent(frequencyPenalty, forKey: .frequencyPenalty)
        try container.encodeIfPresent(logitBias, forKey: .logitBias)
        try container.encodeIfPresent(logprobs, forKey: .logprobs)
        try container.encodeIfPresent(topLogprobs, forKey: .topLogprobs)
        try container.encodeIfPresent(maxTokens, forKey: .maxTokens)
        try container.encodeIfPresent(maxCompletionTokens, forKey: .maxCompletionTokens)
        try container.encodeIfPresent(n, forKey: .n)
        try container.encodeIfPresent(presencePenalty, forKey: .presencePenalty)
        try container.encodeIfPresent(responseFormat, forKey: .responseFormat)
        try container.encodeIfPresent(seed, forKey: .seed)
        try container.encodeIfPresent(serviceTier, forKey: .serviceTier)
        try container.encodeIfPresent(stop, forKey: .stop)
        try container.encodeIfPresent(stream, forKey: .stream)
        try container.encodeIfPresent(streamOptions, forKey: .streamOptions)
        try container.encodeIfPresent(temperature, forKey: .temperature)
        try container.encodeIfPresent(topP, forKey: .topP)
        try container.encodeIfPresent(tools, forKey: .tools)
        try container.encodeIfPresent(toolChoice, forKey: .toolChoice)
        try container.encodeIfPresent(parallelToolCalls, forKey: .parallelToolCalls)
        try container.encodeIfPresent(user, forKey: .user)
        try container.encodeIfPresent(functionCall, forKey: .functionCall)
        try container.encodeIfPresent(functions, forKey: .functions)
    }
}

